<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[DOPCN]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.fengweizhou.com/"/>
  <updated>2015-12-21T16:06:17.000Z</updated>
  <id>http://blog.fengweizhou.com/</id>
  
  <author>
    <name><![CDATA[Dopcn]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Git hooks 的几个用例]]></title>
    <link href="http://blog.fengweizhou.com/2015/09/22/githooks/"/>
    <id>http://blog.fengweizhou.com/2015/09/22/githooks/</id>
    <published>2015-09-21T16:02:37.000Z</published>
    <updated>2015-12-21T16:06:17.000Z</updated>
    <content type="html"><![CDATA[<p>自动化是提高开发效率的有效手段之一。在源码管理过程中要实现自动化，必须能够知道源码管理工具内部的事件进行状态，显然对于这些独立工具是没办法像在同一个程序中一样进行类似 KVO 式的外部监听，好在 Git 就像一个设计完备的库一样提供了部分关键流程的调用接口，也就是 githooks。</p>
<p>将要处理的情景是在使用 Git 做版本管理，用 Cocoapods 进行第三方库管理的项目中</p>
<ol>
<li>从服务器 pull 下来后 <code>Podfile.lock</code> 发生变化，也就是本地 pod 和服务器中的不一致，需要 <code>pod install</code></li>
<li>从服务器 pull 下来证书发生变化，在一个开发团队里每个人有自己的证书用于真机调试，需要改为自己的证书</li>
<li>切换分支后  <code>Podfile.lock</code> 发生变化，需要 <code>pod install</code></li>
</ol>
<p>githooks 本身是一个个有固定名称的脚步，相当于有固定名称的 delegate 方法，在每一次执行所绑定 git 命令时触发，例如 <code>pre-commit</code> 和  <code>post-commit</code> 分别会在 <code>git commit</code> 的前后触发，<code>githooks</code> 可以是任意系统支持运行的脚本如 Shell Perl Python Ruby。</p>
<p><code>githooks</code> 支持绑定的类型都列在了文档里 man githooks。为了实现场景1、2的自动化需要使用的是 <code>post-merge</code> 。<code>post-merge</code> 绑定的命令是 `git merge 和 git pull，post 前缀类型的 githook 不能影响 git 命令本身的执行，pre 前缀的 hook 可以。新版本的 git 项目在初始化的时候在根目录都建有 .git/hooks/ 目录，里面存放所有 hook ，打开这个文件夹里面默认有一些sample后缀的示例文件，去掉 .sample 这些示例才能真正运行，如果已经有 post-merge 去掉 sample 后缀，如果没有新建 post-merge 文件添加可执行权限 chmod +x post-merge，添加脚本内容：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'xcodeproj'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">cmd = <span class="string">' changed_files="$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)"</span><br><span class="line">echo "$changed_files" | grep --quiet "Podfile.lock" &amp;&amp; eval "pod install"</span><br><span class="line">echo "pod installed" '</span></span><br><span class="line"></span><br><span class="line">system( cmd )</span><br><span class="line"></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">xcproj = <span class="constant">Xcodeproj::Project</span>.open(<span class="string">"DroppingBall.xcodeproj"</span>)</span><br><span class="line"></span><br><span class="line">xcproj.build_configurations.each <span class="keyword">do</span> |item|</span><br><span class="line">    item.build_settings[<span class="string">'CODE_SIGN_IDENTITY[sdk=iphoneos*]'</span>] = <span class="string">"iOS Development: Weizhou Feng (XXXXXXXXXX)"</span></span><br><span class="line">    item.build_settings[<span class="string">'PROVISIONING_PROFILE[sdk=iphoneos*]'</span>] = “xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx<span class="string">"</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#4</span><br><span class="line">xcproj.save</span></span><br></pre></td></tr></table></figure>
<p>第一行声明这是一个 Ruby 脚本，使用 Ruby 的原因是可以直接用 xcodeproj 这个库， cocoapods 使用这个库创建或修改xcode 的项目文件，这里需要用它修改 project.pbxproj 内容</p>
<p>#1 引入 xcodeproj 库</p>
<p>#2 pull 之后获取 git 状态还是 shell 命令方便不需要增加依赖，所以直接在脚本中调用 shell 命名可以分为三步：</p>
<ol>
<li>git diff 取得 pull 之后发生变化的所有文件名称</li>
<li>grep 判断是否包含 Podfile.lock</li>
<li>如果有执行 pod install<br>更新结束后在终端输出 pod installed</li>
</ol>
<p>#3 打开当前项目文件，DroppingBall 是这里的项目名称。读取构建模式一般有两种：Debug 和 Release，分别将其中的 build setting 选项 CODE_SIGN_IDENTITY 和 PROVISIONING_PROFILE 改为自己的，要赋的值可以现在 Xcode 中通过菜单选择正确的选项然后打开 project.pbxproj 把文本内容复制出来用</p>
<p>#4 保存</p>
<p>然后是情景3，切换分支需要的 hook 是 post-checkout，和上面一样保证 post-checkout 在文件夹里存在，添加内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh&#10;&#10;if ! diff -q &#34;Podfile.lock&#34; &#34;Pods/Manifest.lock&#34; &#62; /dev/null ; then&#10;    pod install&#10;fi</span><br></pre></td></tr></table></figure>
<p>这次是 shell 脚本，所做的事情其实和 cocoapods 做的一样，只不过 cocoapods 的脚本会在 xcode 里生成一个 error: The sandbox is not in sync with the Podfile.lock. Run ‘pod install’ or update your CocoaPods installation. 这里则是直接执行 pod install</p>
<p>资源：<br><a href="http://githooks.com" target="_blank" rel="external">http://githooks.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自动化是提高开发效率的有效手段之一。在源码管理过程中要实现自动化，必须能够知道源码管理工具内部的事件进行状态，显然对于这些独立工具是没办法像在同一个程序中一样进行类似 KVO 式的外部监听，好在 Git 就像一个设计完备的库一样提供了部分关键流程的调用接口，也就是 gith]]>
    </summary>
    
      <category term="git" scheme="http://blog.fengweizhou.com/tags/git/"/>
    
      <category term="自动化" scheme="http://blog.fengweizhou.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="软件工程" scheme="http://blog.fengweizhou.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为什么数组下标从0开始]]></title>
    <link href="http://blog.fengweizhou.com/2015/07/21/why-array-start-from-0/"/>
    <id>http://blog.fengweizhou.com/2015/07/21/why-array-start-from-0/</id>
    <published>2015-07-21T13:13:44.000Z</published>
    <updated>2015-12-21T13:21:55.000Z</updated>
    <content type="html"><![CDATA[<p>从0开始记数经常被作为一个人是一名程序员的象征，在大多数主流编程语言中数组的记数都是以0为首位，今天读了 Dijkstra 的一篇旧文结合我的理解来谈谈为什么数组记数从0开始。</p>
<p>首先使用 0 作为数组第一位并不一定是一个正确的做法， 事实上也有以 1 作为首位的编程语言存在（Matlab，Fortran， Lua等），在 Dijkstra 的文章里他提出的证明思路是这样的：为表示一段离散的自然数集合例如 [4, 5, 6] 可以使用的公式有四种：<br>a. 4 ≤ i &lt; 7<br>b. 3 &lt; i ≤ 6<br>c. 4 ≤ i ≤ 6<br>d. 3 &lt; i &lt; 7</p>
<p>这四种表达方式的含义是一样的，那么他们之间是否有优劣之分？ 是有的，考虑如果数值中包含自然数的最小值，那么 bd 的表达方式中下界就要使用非自然数这样是不完美的，所以首先排除。其次考虑 ac 如果这个集合是空集，用 c 是无法表达的（右侧的值大于等于左侧），于是就得到表达集合的最佳方式 4 ≤ i &lt; 7.</p>
<p>对于包含 N 个元素的数组 array[i] 来说，对比下表的两种取值，从1开始记数是 1 ≤ i &lt; N+1, 另一种使用更多的是 0 ≤ i &lt; N, 后者看上去更 nice，并且每个元素的下标值等于在他之前元素的个数。</p>
<p>Dijkstra 是典型的计算机科学家，研究算法（Dijkstra’s algorithm）的学院派。在论证过程中的看上去更好和下标值等于之前元素个数都是很理论性的偏好，说不上是严格证明，事实上在实际使用过程中以 0 开头的数组取最后一个元素时 array[lengh-1] 才是更常见的 ugly 做法，所以在 Cocoa 里 NSArray 很早就有了 lastObject 这个方法。</p>
<p>虽然 Dijkstra 提供的论证不一定令人信服，以0作为首个元素记数还有其他一些原因：</p>
<p>对于 C 语言来说数组即指针，以 0 为首位那么 a 和 a[0] 就代表同一个值，不需要增加移动操作或者数值计算，这很可能是起初 C 会选择以 0 开始记数的原因。</p>
<p>另外对于求模运算，以 0 开始记数的数组在形式上会更整齐。</p>
<p>最后，自然数里的自然是一种理论上的自然，用0个回答冰箱里能装几个大象比装不了在形式上要统一很多，并且 0 真的是一个自然数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从0开始记数经常被作为一个人是一名程序员的象征，在大多数主流编程语言中数组的记数都是以0为首位，今天读了 Dijkstra 的一篇旧文结合我的理解来谈谈为什么数组记数从0开始。</p>
<p>首先使用 0 作为数组第一位并不一定是一个正确的做法， 事实上也有以 1 作为首位]]>
    </summary>
    
      <category term="0" scheme="http://blog.fengweizhou.com/tags/0/"/>
    
      <category term="计算机科学" scheme="http://blog.fengweizhou.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[做产品的一年]]></title>
    <link href="http://blog.fengweizhou.com/2014/12/21/one-year-as-pm/"/>
    <id>http://blog.fengweizhou.com/2014/12/21/one-year-as-pm/</id>
    <published>2014-12-21T13:02:34.000Z</published>
    <updated>2015-12-21T13:10:29.000Z</updated>
    <content type="html"><![CDATA[<p>2013年7月我毕业，开始从事一个叫做产品助理的工作，在一家互联网公司。2013年是产品这个概念最疯传的一年，那一年所有人都在谈论张小龙的产品理念，那一年所有人都要跟你谈用户体验。疯传的背后有产业真实的发展与前进，也有互联网时代典型的一哄而上。这一年我学到的：</p>
<h3 id="1-__u5C0F_u5FC3_u5728_u8BA8_u8BBA_u4E2D_u7528_u5230_u7528_u6237_u4F53_u9A8C_u8FD9_u4E2A_u8BCD_u7684_u4EBA"><a href="#1-__u5C0F_u5FC3_u5728_u8BA8_u8BBA_u4E2D_u7528_u5230_u7528_u6237_u4F53_u9A8C_u8FD9_u4E2A_u8BCD_u7684_u4EBA" class="headerlink" title="1. 小心在讨论中用到用户体验这个词的人"></a>1. 小心在讨论中用到用户体验这个词的人</h3><p>在产品讨论中直接用到用户体验这个词的人是典型的一哄而上的人，就好像有人跟你说：这个问题我们可以用大数据的方法解决一样，当他说出这种词的时候就已经暴露了他的无知，无论这种无知是有意还是无意的，小心总是没有错的。我知道这种无知再更多的场合和情景下可能是常态和客观现实，但毕竟现实是值得被讽刺得这也是客观现实。</p>
<h3 id="2-__u6CA1_u6709_u91CF_u5316_u7684_u6807_u51C6_u65E0_u6CD5_u505A_u6709_u6548_u7684_u51B3_u5B9A"><a href="#2-__u6CA1_u6709_u91CF_u5316_u7684_u6807_u51C6_u65E0_u6CD5_u505A_u6709_u6548_u7684_u51B3_u5B9A" class="headerlink" title="2. 没有量化的标准无法做有效的决定"></a>2. 没有量化的标准无法做有效的决定</h3><p>在这一年的工作当中，在产品方面给我收获最大是参加公司里的一个新技术应用比赛，在这个比赛中我主导了一个产品从创意产生到原型上线的整个过程，我们有4个团队成员，当时的工作分别是2个产品1个技术1个测试，报名和队伍的组织者是我。按照比赛的进程说说每个阶段的收获：</p>
<h4 id="a-__u56E2_u961F_u5185_u90E8_u786E_u5B9A_u65B9_u5411"><a href="#a-__u56E2_u961F_u5185_u90E8_u786E_u5B9A_u65B9_u5411" class="headerlink" title="a. 团队内部确定方向"></a>a. 团队内部确定方向</h4><p>团队内部的决策过程是很典型的，我不主导我不说话，所以主导确定下来方向并不难</p>
<h4 id="b-__u539F_u578B_u5236_u4F5C"><a href="#b-__u539F_u578B_u5236_u4F5C" class="headerlink" title="b. 原型制作"></a>b. 原型制作</h4><p>这里的原型并不是指设计稿，而是一个可以真实使用的简单实现。在这个过程中作为设计需要和技术不断进行沟通，这个阶段学到的是：不要预设别人是怎么沟通的，没有应该就是怎样的事情，所有事情都应该说清楚；此外，在应该怎样设计的问题上我们经历了一次争论，问题的焦点是界面风格应该和旧的但是成功的产品保持一致，还是以创新的方式进行全新的更好看的设计，可惜任何有关偏好的问题都是没有结果的，一个问题在讨论之前需要先可以量化的标准</p>
<h4 id="c-__u5411_u9886_u5BFC_u6C47_u62A5_u4EA7_u54C1_u601D_u8DEF"><a href="#c-__u5411_u9886_u5BFC_u6C47_u62A5_u4EA7_u54C1_u601D_u8DEF" class="headerlink" title="c. 向领导汇报产品思路"></a>c. 向领导汇报产品思路</h4><p>或许根据不同的公司环境，这个环节会有差异，因为我也是那个做汇报的人，仅从我的经历出发这个阶段我学到：你觉得对的事即使真的是对的，别人也不会觉得是对的，更别说有可能是错的</p>
<h3 id="3-__u9700_u6C42_u4E0D_u4E00_u5B9A_u662F_u5408_u7406_u7684_uFF0C_u4F46_u4E0D_u987E_u53CA_u9700_u6C42_u4E00_u5B9A_u662F_u4E0D_u5408_u7406_u7684"><a href="#3-__u9700_u6C42_u4E0D_u4E00_u5B9A_u662F_u5408_u7406_u7684_uFF0C_u4F46_u4E0D_u987E_u53CA_u9700_u6C42_u4E00_u5B9A_u662F_u4E0D_u5408_u7406_u7684" class="headerlink" title="3. 需求不一定是合理的，但不顾及需求一定是不合理的"></a>3. 需求不一定是合理的，但不顾及需求一定是不合理的</h3><p>这一年里因为这个职位的缘故，我认识很多不同职位上的人，他们中有销售，策划，市场，社区管理，运营，技术，通过与这些人的交流在无意中帮助我得以看清整个需求传递的链条。看清楚这个过程，就会发现在这个链条中的人对于整个链条的影响是微乎其微的，链条的运作其实都取决于老板，老板在处理链条运作方面的能力决定了一切，其他人做好自己的事情就已经是最好的结局。</p>
<h3 id="4-__u9664_u975E_u8FEB_u4E0D_u5F97_u5DF2_uFF0C_u6CA1_u6709_u4EBA_u4F1A_u770B_u6587_u6863"><a href="#4-__u9664_u975E_u8FEB_u4E0D_u5F97_u5DF2_uFF0C_u6CA1_u6709_u4EBA_u4F1A_u770B_u6587_u6863" class="headerlink" title="4. 除非迫不得已，没有人会看文档"></a>4. 除非迫不得已，没有人会看文档</h3><p>这一年里为数不多能让我津津乐道的是我用 sina app engine 做服务器用 PHP + Bootstrap 为运营写了一个简化后台操作的工具，那段时间还做了一个实时翻译的小工具，方便自己在翻译时用。在我的简易版后台操作里，即使是我认为写的清清楚楚的操作指南，作为一个互联网公司的员工依然还是不断出问题，囿于公司本身后台不稳定并没有做进一步操作流程的改善。从产品设计的角度讲这就是真实的需要产品使用指南的产品除非迫不得已，不会有人用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2013年7月我毕业，开始从事一个叫做产品助理的工作，在一家互联网公司。2013年是产品这个概念最疯传的一年，那一年所有人都在谈论张小龙的产品理念，那一年所有人都要跟你谈用户体验。疯传的背后有产业真实的发展与前进，也有互联网时代典型的一哄而上。这一年我学到的：</p>
<h]]>
    </summary>
    
      <category term="产品经理" scheme="http://blog.fengweizhou.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="其他" scheme="http://blog.fengweizhou.com/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
