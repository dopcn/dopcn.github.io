<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[这很尾舟@dopcn]]></title>
  <subtitle><![CDATA[你是个聪明人，所以我第一眼看到你，就已开始喜欢你]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.fengweizhou.com/"/>
  <updated>2017-07-08T02:23:29.000Z</updated>
  <id>http://blog.fengweizhou.com/</id>
  
  <author>
    <name><![CDATA[Dopcn]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Mac OSX launchd 定时任务]]></title>
    <link href="http://blog.fengweizhou.com/2017/06/04/mac-launchd/"/>
    <id>http://blog.fengweizhou.com/2017/06/04/mac-launchd/</id>
    <published>2017-06-04T12:44:09.000Z</published>
    <updated>2017-07-08T02:23:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Mac_OSX_launchd__u5B9A_u65F6_u4EFB_u52A1"><a href="#Mac_OSX_launchd__u5B9A_u65F6_u4EFB_u52A1" class="headerlink" title="Mac OSX launchd 定时任务"></a>Mac OSX launchd 定时任务</h1><p>除了工作里，生活中也有很多重复的任务。比如说定期查询户口办理状态，尽可能第一时间去办理下一步。所以需要有一种方法可以定时跑一个脚本去爬取查询网站，解析结果最后通知自己。在 Mac 上可以用 launchd。</p>
<p>在操作系统中除了我们手动打开关闭的应用程序，还有一类后台常驻的进程，叫做 service 或者 daemon，大部分系统服务都是常驻的，在命令行中通过 <code>launchctl list</code> 查看，大部分是以 com.apple 开头。我们自己也可以创建一个常驻任务加载到 launchd 中。例如 cleanmymac 就加在了一个定时启动的任务在我的系统里。可以说 launchd 是管理这些后台进程的后台进程。</p>
<h3 id="u521B_u5EFA_u4E00_u4E2A_launchd__u4EFB_u52A1"><a href="#u521B_u5EFA_u4E00_u4E2A_launchd__u4EFB_u52A1" class="headerlink" title="创建一个 launchd 任务"></a>创建一个 launchd 任务</h3><p>创建一个任务非常简单，只要新建一个合法的 plist 文件，下面这个是为了实现上面提到的需求</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.fengweizhou.scheduledJobs<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/fengweizhou/Documents/MyProjects/scheduledJobs/.build/release/scheduledJobs<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">integer</span>&gt;</span>10<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">integer</span>&gt;</span>30<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">integer</span>&gt;</span>17<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">integer</span>&gt;</span>30<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个 plist 包含三个关键部分：</p>
<ol>
<li>唯一标示 Label；// 也是 plist 文件名</li>
<li>运行的命令； // 上面这个例子中是我自己写的程序</li>
<li>运行时机；</li>
</ol>
<p>运行时机可配置的选项很多，具体可以查看官方文档，这个例子中我想要在每天的早上10点半和下午5点半各运行一次我的爬虫程序。</p>
<h3 id="u52A0_u8F7D_launchd__u4EFB_u52A1"><a href="#u52A0_u8F7D_launchd__u4EFB_u52A1" class="headerlink" title="加载 launchd 任务"></a>加载 launchd 任务</h3><p>将配置文件放入指定目录，我是放在用户目录下 <code>~/Library/LaunchAgents</code> 也可以放在系统根目录的对应文件夹下，区别就是当前用户还是全体用户。放入后运行 <code>launchctl load com.fengweizhou.scheduledJobs</code> 然后 <code>launchctl list</code> 就可以看见自己的任务了，如果要立马运行一次可以使用 <code>launchctl start</code></p>
<h3 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h3><p>每次修改了 plist 文件都必须 <code>launchctl unload</code> 再 load 进去，进行手动的 reload，才有效果</p>
<p>在文档中提到了，如果在任务设定的时间点系统是休眠的，那么任务会在休眠结束时执行一次。在我实际使用的过程观察到这个机制是有时间限制的，如果结束休眠的时间和任务设定时间相差不远会执行，但是如果相差很远就不会再执行。这和 iOS 上闹钟的行为是一摸一样的，再加上 iOS 和 OSX 系出同源，所以可以猜测 iOS 的闹钟实现是使用了 launchd，这也可以推论出另一个结果 iOS 上没法作出第三方功能强大的闹钟应用，因为沙盒限制。闹钟APP 还是安卓上的强。</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/ScheduledJobs.html#//apple_ref/doc/uid/10000172i-CH1-SW2" target="_blank" rel="external">Daemons and Services Programming Guide</a></p>
<p><a href="http://www.launchd.info/" target="_blank" rel="external">http://www.launchd.info/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Mac_OSX_launchd__u5B9A_u65F6_u4EFB_u52A1"><a href="#Mac_OSX_launchd__u5B9A_u65F6_u4EFB_u52A1" class="headerlink" title="Mac OSX laun]]>
    </summary>
    
      <category term="tag" scheme="http://blog.fengweizhou.com/tags/tag/"/>
    
      <category term="launchd" scheme="http://blog.fengweizhou.com/tags/launchd/"/>
    
      <category term="Mac" scheme="http://blog.fengweizhou.com/categories/Mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GCD 入门与进阶]]></title>
    <link href="http://blog.fengweizhou.com/2017/01/21/grand-central-dispatch/"/>
    <id>http://blog.fengweizhou.com/2017/01/21/grand-central-dispatch/</id>
    <published>2017-01-20T17:05:02.000Z</published>
    <updated>2017-07-08T02:45:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="GCD__u5165_u95E8_u4E0E_u8FDB_u9636"><a href="#GCD__u5165_u95E8_u4E0E_u8FDB_u9636" class="headerlink" title="GCD 入门与进阶"></a>GCD 入门与进阶</h1><h2 id="u5165_u95E8"><a href="#u5165_u95E8" class="headerlink" title="入门"></a>入门</h2><p>GCD 对我来说是初入门 iOS 开发的记忆，那个时候还不知道 UIKit 中的类应该在主线程调用，所以异步获取了数据之后虽然调用了 reloadData，但是界面怎么都不刷新，心慌慌查了好久才解决这个问题，现在回想起来也是蛮有趣。这可以说明 GCD 的引入，真的大大降低了进行多线程操作的门槛，然而要解决多线程带来的一些难题却依旧不那么容易。</p>
<h2 id="u591A_u7EBF_u7A0B_u7EFC_u8FF0"><a href="#u591A_u7EBF_u7A0B_u7EFC_u8FF0" class="headerlink" title="多线程综述"></a>多线程综述</h2><p>从我开始做 iOS 开发以来从没有在项目中直接使用过 NSThread 对象，所以一直没有什么直观的印象，直到简单了解了 pthread 之后才清晰的认识到 NSThread 其实是对 pthread 的简单封装面向对象化，在 iOS 10 中 NSThread 新增了使用 block 直接初始化的方法，这才使得 NSThread 的使用简化了不少，而在这之前和 pthread 一样不够优雅。在 pthread 中使用 pthread_create  创建线程，要传入函数指针作为回调，早先的 NSThread 则是标准的 cocoa 风格 target selector。</p>
<p>NSThread 对 pthread 的封装只是胶水式的薄薄封装，并没有提供其他并发相关功能。真正实现更高级封装的是 NSOperationQueue 和 GCD，NSOperationQueue 在引入 GCD 之后应该是使用 GCD 重写了，所以 iOS8 新增了 underlyingQueue 这个属性，返回一个 dispatch_queue_t。我曾经在面试里被鄙视过：GCD？GCD 能实现 NSOperation 的依赖关系吗？那个时候我没有回答上来，如果再给我一次回答的机会，我会说：可以，只是麻烦一些。这就要说到一些 GCD 的进阶功能。</p>
<h2 id="GCD__u8FDB_u9636"><a href="#GCD__u8FDB_u9636" class="headerlink" title="GCD 进阶"></a>GCD 进阶</h2><p>面向对象是一种提高抽象能力很好的手段，已数据的形式封装掉了很多细节的逻辑。要实现 NSOperation 的依赖关系，可以使用 dispatch_group。SDK 的头文件是这样介绍的：A group of blocks submitted to queues for asynchronous invocation。将一组 block 作为一个“对象”来管理（dispatch_group_t 当然并不是一个对象，而是一个和 ObjC 对象很像的结构体，可以通过配置由 ARC 管理生命周期），常用的方法有两对 dispatch_group_wait dispatch_group_notify 和 dispatch_group_enter dispatch_group_leave。在增加依赖的时候进行 group_enter，在依赖的 block 执行完后 group_leave，这就是 swift forelimbs foundation 中的实现方式。dispatch_group 所实现的组管理，类似于 pthread_join。</p>
<p>iOS8 之后 block 不再是简单的 block 了，可以是 dispatch_block_t。虽然看定义 typedef void (^dispatch_block_t)(void); 它只是一个空参数空返回 的 block，但是通过API dispatch_block_create 为 block 指定 flags，通过这个接口创建出来的 dispatch_block_t 还可以 dispatch_block_wait，dispatch_block_notify，dispatch_block_cancel，这样就解决了另一个问题：block 能像 NSOperation 一样取消吗？答案是可以。</p>
<p>另一个进阶 dispatch 库成员就是 dispatch_semaphore 了。在 AFNetworking 里有一处应用，使用 dispatch_semaphore 从异步的 block 里取出值同步的返回：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)tasksForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</div><div class="line">    __block <span class="built_in">NSArray</span> *tasks = <span class="literal">nil</span>;</div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line">    [<span class="keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="built_in">NSArray</span> *dataTasks, <span class="built_in">NSArray</span> *uploadTasks, <span class="built_in">NSArray</span> *downloadTasks) &#123;</div><div class="line">        <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(dataTasks))]) &#123;</div><div class="line">            tasks = dataTasks;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(uploadTasks))]) &#123;</div><div class="line">            tasks = uploadTasks;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(downloadTasks))]) &#123;</div><div class="line">            tasks = downloadTasks;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(tasks))]) &#123;</div><div class="line">            tasks = [@[dataTasks, uploadTasks, downloadTasks] valueForKeyPath:<span class="string">@"@unionOfArrays.self"</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dispatch_semaphore_signal(semaphore);</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> tasks;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>NSURLSession 的接口全部都是异步执行回调，所以要返回异步block 的参数，就必须等异步block 执行完。</p>
<h2 id="u5176_u4ED6_u5E94_u7528"><a href="#u5176_u4ED6_u5E94_u7528" class="headerlink" title="其他应用"></a>其他应用</h2><p>除了这些还有一些其他少见应用：</p>
<p>dispatch_apply 实现多线程迭代，和使用 enumerateObjectsWithOptions 时指定 NSEnumerationConcurrent 差不多，迭代过程中最好不要有共用资源。</p>
<p>dispatch_source_timer 和 NSTimer 不同不依赖 runloop，所以不会受 runloop mode 影响。</p>
<p>dispatch_set_target_queue target_queue 可以影响新创建 queue 的优先级；多个串行 queue 同一个串行 target_queue 可以实现 queue 间任务串行</p>
<h2 id="u5176_u4ED6_u76F8_u5173"><a href="#u5176_u4ED6_u76F8_u5173" class="headerlink" title="其他相关"></a>其他相关</h2><p>虽然说 GCD 是真正的高级封装，但是有些地方还是可以很明显的暴露出 pthread 的特点，特别是一些命名例如：<br>pthread_getspecific，<br>dispatch_queue_get_specific；<br>pthread_setspecific，<br>dispatch_queue_set_specific。<br>用于为 queue 做标示。为了做标示还可以通过 dispatch_queue_get_label 获取创建时的 label</p>
<p>用 GCD 代替加锁实现线程安全访问，例子是 FMDatabaseQueue 的实现。其实就是 GCD 的方法中进行了加锁，不然 dispatch_sync  到当前线程为什么会死锁。但好处是抽象层级更高，不用手动处理锁相关。</p>
<p>不同优先级的 queue 低优先级会等所有高优先级的 queue 已经分配资源开始执行后才会被分配。在 background priority queue 中还会有 disk IO 和 network IO throttle。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="GCD__u5165_u95E8_u4E0E_u8FDB_u9636"><a href="#GCD__u5165_u95E8_u4E0E_u8FDB_u9636" class="headerlink" title="GCD 入门与进阶"></a>GCD 入门与进阶]]>
    </summary>
    
      <category term="多线程" scheme="http://blog.fengweizhou.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="GCD" scheme="http://blog.fengweizhou.com/tags/GCD/"/>
    
      <category term="iOS" scheme="http://blog.fengweizhou.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim 日常使用初步]]></title>
    <link href="http://blog.fengweizhou.com/2017/01/19/myvim/"/>
    <id>http://blog.fengweizhou.com/2017/01/19/myvim/</id>
    <published>2017-01-19T15:39:10.000Z</published>
    <updated>2017-07-06T13:22:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="vim__u65E5_u5E38_u4F7F_u7528_u521D_u6B65"><a href="#vim__u65E5_u5E38_u4F7F_u7528_u521D_u6B65" class="headerlink" title="vim 日常使用初步"></a>vim 日常使用初步</h1><p>原生 vim 需要的配置不少，而且想要有一些特定自动补全需要的配置步骤就更多（iOS API），所以我主要是用 vim  mode 插件。几乎主流的 IDE 应该都有 vim 插件，甚至 sublime text 都有 vim mode 可以开启。</p>
<p>和一条普世的需求一样，80%的使用需求由20%功能实现，vim 日常使用需要掌握的功能其实并不多。</p>
<h2 id="insert_mode_edit_mode"><a href="#insert_mode_edit_mode" class="headerlink" title="insert mode edit mode"></a>insert mode edit mode</h2><p>vim 与常见的文本输入软件最明显的区别是 insert mode 和 edit mode，这里的名字是我自己取的。正如这两个名字所透露出来的一样，在vim中输入和编辑是在两种不同的状态下进行。vim 可能真的是为程序员而成的编辑器，因为它所持的设计理念贴近编辑比输入更常用，和在开发过程中一样：维护工作要比新功能开发重要的多。所以进入vim 默认情况下是处于edit mode 此时无法进行输入，第一次打开vim 的人大概很多就在这里懵逼了。</p>
<h2 id="u5149_u6807_u79FB_u52A8"><a href="#u5149_u6807_u79FB_u52A8" class="headerlink" title="光标移动"></a>光标移动</h2><p>区分了这两种状态，并且明确edit mode 是默认之后，就可以开始进行其他vim操作了，首先依然从最明显的区别来，光标的上下左右移动，它们分别是</p>
<p>h 向左<br>j 向下<br>k 向上<br>l 向右。</p>
<p>大多数键盘其实都是有单独的上下左右键位的，除了大名鼎鼎的HHKB和一些61键小键盘。我自己还是更喜欢有独立的方向键这样在按IDE的快捷键的时候更方便一些。至于vim使用这四个键作为方向键，一方面是edit mode的得天独厚，一方面确实可以减少手部移动。总的来说有利有弊，我最终还是因为不习惯没有方向键的poker卖掉了。</p>
<p>vim的设计是用来处理英文文档的，所以对于英文来说除了每次一个单位的上下左右移动还有移动到下一个单词的首字母 w<br>移动到下一个单词的尾字母e<br>移动到上一个单词首字母b<br>移动到该行首部^<br>移动到该行尾部$<br>直接跳转到某一行 :50 跳转到50行<br>不滑动页面跳转到页面中部M（大写）<br>滑动页面将光标当前所在行移动到页面中部zz<br>滑动页面将当前行移动到页面底部zb<br>滑动到顶部zt<br>直接跳到第一行gg<br>直接跳到最后一行G<br>跳转到对应括号 %<br>向下翻半页ctrl+d<br>向上翻半页ctrl+u<br>跳到下一个空行 ctrl+]<br>对应跳到上一个空行是 ctrl+[<br>将 caps lock 键换成 ctrl 会降低按这些组合键的难度。以上都是在edit mode下直接按键就可以实现。除了这些内建的跳转按键，还是自定义位置跳转，或者说mark jump。在edit mode下按m紧接着一个字母就是用这个字母标记当前光标所在位置，将光标移动到当前文件其他任意位置点击’字母，就可以直接跳转到标记位置所在行。同理使用大写 M 可以实现跨文件跳跃。这个功能对于阅读代码、debug来说非常有用。</p>
<p>高效的光标移动是提高阅读编辑代码的第一步，毕竟我们只有一个光标位置可以进行输入。其他编辑器例如 sublime text emacs 和一些 IDE 在光标移动方面主要依赖组合快捷键，达到同样的效果 vim mode 下的移动我觉得更高效。</p>
<h2 id="u8F93_u5165"><a href="#u8F93_u5165" class="headerlink" title="输入"></a>输入</h2><p>在 vim 中进入 insert mode 的方式有很多种，常用的如按键 i 在当前位置后插入，按键 a 在当前位置前插入，组合按键 cw 删除当前位置到词尾并开始输入。输入完习惯直接按 ESC 退出 insert mode。按键 o 新起一行开始输入，大写 O 则是在当前行前面新起一行开始输入。</p>
<h2 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h2><p>dd 用来删除当前行<br>3dd 删除 3 行<br>dw 删除到词尾<br>db 删除到词首，这个按起来挺别扭<br>d + } 删除到下一个空行<br>d + { 删除到上一个空行</p>
<h2 id="u5176_u4ED6_u7F16_u8F91_u529F_u80FD"><a href="#u5176_u4ED6_u7F16_u8F91_u529F_u80FD" class="headerlink" title="其他编辑功能"></a>其他编辑功能</h2><p>撤销上一步操作：按键 u<br>撤销撤销那步操作：ctrl + r<br>查找：edit mode 下输入 /word 查找当前位置之后的 word 单词位置，紧接着按 n 跳到下一个 word 出现的位置，N 跳到上一个出现的位置<br>指定行号间字符替换：在 edit mode 下输入:1,10s/one/two/g 回车会将第1行到第10行之间的字符 one 全部替换成 two，这个是最简单的应用，替换功能还可以增加更细致的配置<br>重复行为宏录制：按下 q+字母 开始录制，也就是开始进行任意操作，退出 insert mode 再次按下 q 结束录制，录制好之后将光标移动到合适位置，点击 @+字母 应用宏就可以将上一次的操作完成的重复一遍，要注意录制过程中的操作不要依赖于录制时的字符特点，例如字符长度，这样才更通用<br>visual mode：在 edit mode 下按下 v 会进入 visual mode，这个时候可以选择多行进行编辑，例如选择后按下 y 是复制，在任意位置按下 p 是粘贴。<br>visual block mode：在 edit mode 下按 ctrl+v 进入，这要应用是在多行的同一个位置进行插入。这个我总是记不住，步骤挺多，sof 一下就有。这是唯一一个我知道的 sublime text 的字符插入强于 vim 的地方，在 sublime text 中按着 option 外加鼠标点击可以选中多个地方同时输入，vim mode 下似乎不行。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>这些就是我日常使用中会用到的全部了，我没有自定义 vimrc 配置文件，其他重要的功能大多依赖 IDE，例如文件树结构，函数跳转，文件访问历史跳转，快捷文件查找、打开。这些功能在原生 vim 里大多通过插件实现，这就是我不喜欢原生 vim 的地方，配置太多了，很多基本的功能都要插件实现，所以还是 sublime text 用的多一些。</p>
<p>另外 vim 的源代码烂到有人写博客吐槽，有人干脆另起炉灶 neovim，也是挺有意思。</p>
<h2 id="u8865_u5145"><a href="#u8865_u5145" class="headerlink" title="补充"></a>补充</h2><p>居然有一套强大的编辑被我忽略了，在 Vim 中可以实现一定的编辑功能，例如：在一行中任意位置删除到某一个字符 dt[被删除字符]，全程可以理解为 delete to [被删除字符]；还有直接删除一对符号之间的内容 di[符号]，一对的符号包括各种括号和引号；前一个命令中 i 代表 inside 不会包括符号本身，如果要包含符号本身可以用 a，删除包含符号的全部内容就是 da[符号]，以上几个例子中的删除也可以换成复制 y。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="vim__u65E5_u5E38_u4F7F_u7528_u521D_u6B65"><a href="#vim__u65E5_u5E38_u4F7F_u7528_u521D_u6B65" class="headerlink" title="vim 日常使用初步">]]>
    </summary>
    
      <category term="vim" scheme="http://blog.fengweizhou.com/tags/vim/"/>
    
      <category term="工具" scheme="http://blog.fengweizhou.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[函数式与过程式编程区别之不同的世界观]]></title>
    <link href="http://blog.fengweizhou.com/2015/12/10/different-world/"/>
    <id>http://blog.fengweizhou.com/2015/12/10/different-world/</id>
    <published>2015-12-09T16:57:24.000Z</published>
    <updated>2016-01-21T16:58:54.000Z</updated>
    <content type="html"><![CDATA[<p>大名鼎鼎的 objc.io 有一本书叫做 Functional Swift，只看到这个名字很容易误导人以为 Swift 可以是 Functional 的，但事实上这压根不可能，那本书更准确的名称应该是 Functional part of Swift。一个过程式语言可以拥有函数式的功能，特别是一些比较新的语言 Python Ruby 就曾经因为带有这些功能让人觉得更高级，同时也会被一些人评价说他们只不过实现了一些古老语言早就有的功能。这个评价是客观事实，早期从理论研究中诞生的编程语言大多都很函数式，局部变量和赋值这种过程式的功能仅仅是他们的一小部分。大规模应用于实践之后诞生的编程语言则完全将这一局面翻转了过来，完全是建立在局部变量和赋值之上的过程式，慢慢发展之后才开始增加一些函数式的功能。</p>
<p>函数式和过程式的不同根本在于选择不同的模型来模拟现实环境。在现实环境中状态（state）是客观存在的，过程式语言选择使用局部变量来模拟状态用赋值来模拟状态的改变，而函数式语言选择用流结构来模拟状态。</p>
<p>用局部变量和赋值来模拟状态是很容易理解的，这种模拟方式是离散的。状态本身可以看做是一个以时间为参数的函数，局部变量的值就是这个函数在不同的时间作为参数时函数所得到的值。与此相对，流结构是连续的，函数式语言模拟状态的方式并不直接处理每个时间参数下的函数值而是直接处理函数整体，使用的手段多是高阶函数。</p>
<p>这样就可以看出流结构是一门语言是函数式的根本，流结构的实现依赖于表达式的延时求值，没有延时求值功能的语言绝对不是函数式语言，所以 Swift 根本不是函数式语言。</p>
<p>带有函数式功能的过程式语言和带有赋值功能的函数式语言说到底是整个世界观的不同。将延时求值和赋值带来的变动性合理的结合起来这一目标还仅仅停留在理论研究领域。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>大名鼎鼎的 objc.io 有一本书叫做 Functional Swift，只看到这个名字很容易误导人以为 Swift 可以是 Functional 的，但事实上这压根不可能，那本书更准确的名称应该是 Functional part of Swift。一个过程式语言可以拥有]]>
    </summary>
    
      <category term="函数式编程" scheme="http://blog.fengweizhou.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="计算机科学" scheme="http://blog.fengweizhou.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用高阶函数解八皇后问题]]></title>
    <link href="http://blog.fengweizhou.com/2015/12/05/nqueensproblem/"/>
    <id>http://blog.fengweizhou.com/2015/12/05/nqueensproblem/</id>
    <published>2015-12-05T07:50:16.000Z</published>
    <updated>2016-01-21T17:02:43.000Z</updated>
    <content type="html"><![CDATA[<p>八皇后问题是求在八行八列的国际象棋棋盘上放置八个皇后，令她们彼此之间不能相互被吃的所有方法。国际象棋中皇后可以顺着横竖对角线方向行进任意距离。</p>
<p>高阶函数是泛指那些以一个函数（或者称之为一个过程）作为参数的函数，这个问题里用到的标准库里自带的 map flatmap filter reduce</p>
<p>在函数式编程思路中高阶函数在建立抽象和模块化过程中起到了很重要的作用，以 map 为例它将对一个序列的操作抽象出来，使序列本身和对序列的操作分割开来，这样做的好处是方便重用这种操作，也方便更换序列所需要进行的操作，为了实现这两点在常用的命令式写法中都是要整个操作重写才能完成。</p>
<p>高阶函数的组合使用可以更好的体现模块化的思想，高阶函数本身是模块与模块之间的接口，例如得到一个序列中的偶数的平方的序列：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = Array(<span class="number">0</span>...<span class="number">100</span>)</div><div class="line"><span class="keyword">let</span> b = a.filter(&#123;$0<span class="meta">%2</span> == <span class="number">0</span>&#125;).<span class="keyword">map</span>&#123;$0*$0&#125;</div></pre></td></tr></table></figure></p>
<p>模块化的好处自然是替换模块整体结构不变，也就是维护方便。</p>
<p>函数式编程思路解决问题的一般思路都是递归，逐步将问题分解求解。在解八皇后问题过程中递归的思路是 k-1 列已经摆放好 k-1 个皇后，通过 map 得到第 k 列的所有可能解，通过 flatmap 整理解类型，最后 filter 过滤出满足条件的那些解。</p>
<p>reduce 函数用在 filter 的判断是否满足条件的模块中，这个例子里似乎很好的体现了在某些情况中命令式写法可以更高效</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NQueensProblem</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> size: <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(boardSize: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="comment">//size start from 1</span></div><div class="line">        size = boardSize&gt;<span class="number">0</span> ? boardSize : <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">solutions</span><span class="params">()</span></span> -&gt; [[(<span class="type">Int</span>, <span class="type">Int</span>)]] &#123;</div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">isSafe</span><span class="params">(solution: [<span class="params">(Int, Int)</span></span></span>], atColumn column: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</div><div class="line">            <span class="keyword">let</span> (colX, colY) = solution[column]</div><div class="line">            <span class="keyword">return</span> solution.<span class="built_in">reduce</span>(<span class="literal">true</span>, combine: &#123; (isSafe, location) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">                <span class="keyword">let</span> (locX, locY) = location</div><div class="line">                <span class="keyword">if</span> locX == colX &amp;&amp; locY == colY &#123;</div><div class="line">                    <span class="keyword">return</span> isSafe</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> isSafe &amp;&amp;</div><div class="line">                        !(locX == colX || locY == colY || (locX+locY) == (colX+colY) || (locX-locY) == (colX-colY))</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//column start from 0</span></div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">queenCols</span><span class="params">(column: Int)</span></span> -&gt; [[(<span class="type">Int</span>, <span class="type">Int</span>)]] &#123;</div><div class="line">            <span class="keyword">if</span> column == <span class="number">0</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="type">Array</span>(<span class="number">0</span>..&lt;size).<span class="built_in">map</span>&#123; [(<span class="number">0</span>, $<span class="number">0</span>)] &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> queenCols(column-<span class="number">1</span>).<span class="built_in">map</span>(&#123; (partSolution) -&gt; [[(<span class="type">Int</span>, <span class="type">Int</span>)]] <span class="keyword">in</span></div><div class="line">                    <span class="keyword">return</span> <span class="type">Array</span>(<span class="number">0</span>..&lt;size).<span class="built_in">map</span> &#123; partSolution + [(column, $<span class="number">0</span>)] &#125;</div><div class="line">                &#125;).flatMap(&#123; $<span class="number">0</span> &#125;).<span class="built_in">filter</span>&#123; isSafe($<span class="number">0</span>, atColumn: column) &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> queenCols(size-<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> queen = <span class="type">NQueensProblem</span>(boardSize: <span class="number">8</span>)</div><div class="line"><span class="built_in">print</span>(queen.solutions())</div></pre></td></tr></table></figure>
<p>最后当n等于8时一共有92个解法</p>
<p>最后的最后，在 Swift 2.0 之后 flatmap 有了一个特殊用途：过滤nil</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> optionalInts: [<span class="type">Int</span>?] = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">nil</span>, <span class="number">4</span>, <span class="literal">nil</span>, <span class="number">5</span>]</div><div class="line"> </div><div class="line"><span class="keyword">let</span> ints = optionalInts.flatMap &#123; $<span class="number">0</span> &#125;</div><div class="line">ints <span class="comment">// [1, 2, 4, 5]</span></div></pre></td></tr></table></figure>
<p>reference: <a href="https://www.natashatherobot.com/swift-2-flatmap/" target="_blank" rel="external">https://www.natashatherobot.com/swift-2-flatmap/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>八皇后问题是求在八行八列的国际象棋棋盘上放置八个皇后，令她们彼此之间不能相互被吃的所有方法。国际象棋中皇后可以顺着横竖对角线方向行进任意距离。</p>
<p>高阶函数是泛指那些以一个函数（或者称之为一个过程）作为参数的函数，这个问题里用到的标准库里自带的 map flatm]]>
    </summary>
    
      <category term="高阶函数" scheme="http://blog.fengweizhou.com/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
      <category term="八皇后问题" scheme="http://blog.fengweizhou.com/tags/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    
      <category term="计算机科学" scheme="http://blog.fengweizhou.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些「绝对」的和「相对」的]]></title>
    <link href="http://blog.fengweizhou.com/2015/11/28/absolute-vs-relativity/"/>
    <id>http://blog.fengweizhou.com/2015/11/28/absolute-vs-relativity/</id>
    <published>2015-11-28T03:14:46.000Z</published>
    <updated>2017-04-20T17:10:46.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这个世界上所有事物都是相对的，只有「相对」本身是绝对的<br><strong>接盘侠日记</strong></p>
</blockquote>
<a id="more"></a>
<h3 id="u6700_u5C4C_u6587_u4EF6_u547D_u540D"><a href="#u6700_u5C4C_u6587_u4EF6_u547D_u540D" class="headerlink" title="最屌文件命名"></a>最屌文件命名</h3><p>曾经有一个合作的设计师出了一套新版本界面设计稿，她新建了一个文件夹打包上传到内部 GitLab repo ，我 pull 下来看到这个文件夹</p>
<p><img src="1.png" alt="image"></p>
<p>这是我目前看到过最屌的命名，于是我想下一个版本的设计稿文件夹她会起什么名字：「目前最最新的稿子」？「比目前最新的稿子更新的稿子」？「未来最新的稿子」？无论选择这其中的哪一种方案都会有一个共同特点，那就是下一次的起名都必须依赖于这一次的名字，以用来表明这个文件夹更新，而这种依赖是递增不可绕过的，比如说选用第一种方案那么到下下下下个版本就是「目前最最最最最最新的稿子」，以此类推这显然是一个灾难。当然实际中我们的设计师并不会这样，更常见的情况是下一次她的命名直接进入另一个次元，「稿子新」比「目前最新的稿子」更新，这样就可以区分出哪个更新，现在的使用者是清楚了可是接盘侠呢，果然光荣与伟大并不是那么得容易担当。</p>
<h3 id="u7EDD_u5BF9_u548C_u76F8_u5BF9"><a href="#u7EDD_u5BF9_u548C_u76F8_u5BF9" class="headerlink" title="绝对和相对"></a>绝对和相对</h3><p>当需要设定某种唯一标识的时候，绝对的概念能够更明确的定位。当需要描述一种关系的时候，相对的表述方法更加适合。</p>
<p>相对和绝对路径是一个直观的例子。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/Users/</span>fengweizhou<span class="regexp">/Documents/</span>dopcnblog<span class="regexp">/source/</span>_posts/absolute-vs-relativity.md</div><div class="line">source<span class="regexp">/_posts/</span>absolute-vs-relativity.md</div></pre></td></tr></table></figure></p>
<p>绝对路径则是由根目录开始一层一层明确写出到达目标文件的完整路径。相对路径可以直接用文件名引入同一个文件夹中同级的文件，用 <code>../</code> 代表上一级目录。显然两种不同用法在不同的环境中各有优势，在决定使用哪一种用法之前能够明确区分两种方法的不同很重要。</p>
<h3 id="u5176_u4ED6_u7EDD_u5BF9_u548C_u76F8_u5BF9_u7684_u4F8B_u5B50"><a href="#u5176_u4ED6_u7EDD_u5BF9_u548C_u76F8_u5BF9_u7684_u4F8B_u5B50" class="headerlink" title="其他绝对和相对的例子"></a>其他绝对和相对的例子</h3><h4 id="u7EDD_u5BF9_u548C_u76F8_u5BF9_u7684_u754C_u9762_u6784_u5EFA"><a href="#u7EDD_u5BF9_u548C_u76F8_u5BF9_u7684_u754C_u9762_u6784_u5EFA" class="headerlink" title="绝对和相对的界面构建"></a>绝对和相对的界面构建</h4><p>界面布局的相对和绝对。在这个领域「相对」有压倒性的优势，在浏览器端响应式网页应该是如今网站建设的标配，除了流量特别大的网站可能会为了特别定制将移动端网页分出去。使用 CSS 进行网页布局可以分为三个阶段：手写 CSS -&gt; 用 Sass 写 CSS -&gt; 用 Sass 写 Flexbox。在阶段一是使用「绝对」的方式写 CSS，这样依然可以写出「相对」的布局</p>
<iframe width="100%" height="300" src="//jsfiddle.net/wzo25cjt/3/embedded/html,css,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br>HTML 文档在布局时天生就是「相对」的，父元素子元素间相对，同级元素之间的相对。但是这种相对布局的规则是由开发者提前「绝对」写死的。进入阶段二，这个阶段 Sass 为 CSS 引入了编程特性，程序员可以像用编程语言一样写 CSS ，于是写 CSS 的方式变为「相对」。<br><iframe width="100%" height="300" src="//jsfiddle.net/wzo25cjt/10/embedded/html,css,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br>进入阶段三 Flexbox 模型将布局规则抽象为指令，开发者只要列出应该怎样布局剩下的大部分都交给了浏览器去计算，开发者写出的规则也变成「相对」的了。<br><iframe width="100%" height="300" src="//jsfiddle.net/wzo25cjt/11/embedded/html,css,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>iOS 设备上的界面构建技术稍落后于前端不过遵循了同样的路径。从只有一种屏幕大小的时代手写固定的 CGRect，到在 Size Class 中建立 AutoLayout 约束规则，这样编写出的约束规则依然是绝对的，最后再到使用 UIStackView 布局减少了许多需要手动设置 AutoLayout 的步骤。对比最初的手写固定 CGRect 越来越相对。</p>
<h4 id="u9875_u9762_u8F6C_u6362_u8DEF_u5F84_u7684_u76F8_u5BF9_u7EDD_u5BF9"><a href="#u9875_u9762_u8F6C_u6362_u8DEF_u5F84_u7684_u76F8_u5BF9_u7EDD_u5BF9" class="headerlink" title="页面转换路径的相对绝对"></a>页面转换路径的相对绝对</h4><p>我之前合作的产品经理同时负责产品的网页端和客户端，所以可能就是因为这个原因在客户端的设计过程中页面转换逻辑几乎是按照网页端的来，网页端的页面转换是链接跳转，类似于利用指针访问可以任意跳转，相比之下客户端的页面转换逻辑大多时候是后进先出的栈结构。再加上以前页面转换逻辑的写法相对绝对<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="attr">vc</span> = SomeViewController()</div><div class="line">navigationController?.pushViewController(vc, animated: <span class="literal">true</span>)</div></pre></td></tr></table></figure></p>
<p>没少为设计方案来回讨论。后来为了为了尽可能适应这种网页端转换逻辑同时也扩大转换的自由度增加了URLTransformer 层，简单的原型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">protocol</span> <span class="title">URLTransFormer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canTransform</span><span class="params">(url: NSURL)</span></span> -&gt; <span class="type">Bool</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(url: NSURL)</span></span> -&gt; <span class="type">UIViewController</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//======================</span></div><div class="line"><span class="comment">//transformer list start</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">struct</span> <span class="title">Page1Transformer</span>: <span class="title">URLTransFormer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canTransform</span><span class="params">(url: NSURL)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> url.scheme == <span class="string">"mydomain"</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(url: NSURL)</span></span> -&gt; <span class="type">UIViewController</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">SomeViewController</span>(url: url)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//tranformer list end</span></div><div class="line"><span class="comment">//===================</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">URLTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> transformerList = [<span class="type">Page1Transformer</span>()]</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transform</span><span class="params">(url: NSURL)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">        <span class="keyword">for</span> transformer <span class="keyword">in</span> transformerList &#123;</div><div class="line">            <span class="keyword">if</span> transformer.canTransform(url) &#123;</div><div class="line">                <span class="keyword">return</span> transformer.transform(url)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样页面转换逻辑就变成相对的，客户端同一个按钮可以根据服务器返回的链接形式打开不同的页面。这里服务器返回的链接一定要是绝对的完整路径，因为这个链接是在做一个唯一性的标识。</p>
<h4 id="u63CF_u8FF0_u4E00_u79CD_u76F8_u5BF9_u7684_u5173_u7CFB"><a href="#u63CF_u8FF0_u4E00_u79CD_u76F8_u5BF9_u7684_u5173_u7CFB" class="headerlink" title="描述一种相对的关系"></a>描述一种相对的关系</h4><p>程序运行逻辑里有许多部分是要描述一种关系，例如注册页面在用户名密码通过格式验证之后提交按钮才可用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReactiveUIKit</div><div class="line"><span class="keyword">import</span> ReactiveKit</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line">combineLatest(usernameField.rText, passwordField.rText).<span class="built_in">map</span> &#123; username, password <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> name = username, <span class="keyword">let</span> pass = password <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> name.characters.<span class="built_in">count</span> &gt; <span class="number">7</span> &amp;&amp; pass.characters.<span class="built_in">count</span> &gt; <span class="number">7</span></div><div class="line">        &#125;.bindTo(submitButton.rEnabled)</div><div class="line"></div><div class="line">……</div></pre></td></tr></table></figure>
<p>简单地使用用户名和密码都必须大于7位做验证条件，这个验证的 true false 和按钮 enable 状态的true false 之间是一种对应关系，如果用常用的赋值方法来每次改动这个值，可以想象条件分支会非常多，相对而言会不容易维护。这里直接描述对应关系使用的是第三方库 ReactiveKit，除了这个还有其他一些可以实现类似功能的库，不过达到的效果是类似的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这个世界上所有事物都是相对的，只有「相对」本身是绝对的<br><strong>接盘侠日记</strong></p>
</blockquote>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://blog.fengweizhou.com/tags/Swift/"/>
    
      <category term="ReactiveKit" scheme="http://blog.fengweizhou.com/tags/ReactiveKit/"/>
    
      <category term="编程思路" scheme="http://blog.fengweizhou.com/categories/%E7%BC%96%E7%A8%8B%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些有趣的问题在Swift中的表现]]></title>
    <link href="http://blog.fengweizhou.com/2015/11/23/some-special-cases-in-swift/"/>
    <id>http://blog.fengweizhou.com/2015/11/23/some-special-cases-in-swift/</id>
    <published>2015-11-23T05:30:35.000Z</published>
    <updated>2017-04-20T17:10:42.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-__u6392_u5E8F_u8FC7_u7684_u6570_u7EC4_u904D_u5386_u66F4_u5FEB"><a href="#1-__u6392_u5E8F_u8FC7_u7684_u6570_u7EC4_u904D_u5386_u66F4_u5FEB" class="headerlink" title="1. 排序过的数组遍历更快"></a>1. 排序过的数组遍历更快</h3><p><strong>实验</strong></p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sorted = [<span class="literal">false</span>, <span class="literal">true</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> isSorted <span class="keyword">in</span> sorted &#123;</div><div class="line">    <span class="keyword">var</span> datas = Array<span class="function"><span class="params">(count: <span class="number">32768</span>, repeatedValue: <span class="number">0</span>)</span>.<span class="title">map</span> &#123; <span class="params">(n)</span> -&gt;</span> Int <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> n + Int(arc4random_uniform(UInt32(<span class="number">256</span>)))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> isSorted &#123;</div><div class="line">        datas.sortInPlace(&lt;)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> start = NSDate()</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0.</span>..<span class="number">100000</span> &#123;</div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> datas &#123;</div><div class="line">            <span class="keyword">if</span> n &gt; <span class="number">128</span> &#123;</div><div class="line">                sum += n</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Time elapsed when \(isSorted ? "</span>sorted<span class="string">":"</span>unsorted<span class="string">"): \(NSDate().timeIntervalSinceDate(start))"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>输出</strong></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Time</span> <span class="selector-tag">elapsed</span> <span class="keyword">when</span> <span class="attribute">unsorted</span>: <span class="number">14.1824740171432</span></div><div class="line">Time elapsed <span class="keyword">when</span> <span class="attribute">sorted</span>: <span class="number">2.9244259595871</span></div></pre></td></tr></table></figure>
<p>重复运行几次之后可以稳定重现这个时间差，所以这个现象存在，只是差距没有问题来源中的例子里那么大，问题来源中除了被标记为接受的答案之外还有许多高票回答，是我在SOF见过的有最多多个高票答案的问题。简单的解释造成这个问题的原因，是因为现代处理器在处理循环内的 if 判断的时候不是等待上一个 if 结束才进行下一个 if 条件判断，而是预先做判断回过头来如果错了再重来，如果对了就继续。这个例子中数组中的数据值刚好是以 if 条件划分为两部分，如果经过了排序那么预测的正确率就会大大提升，因为用前面的判断结果做为预测，而如果未经排序预测的结果几乎有一半都是错的自然大大降低运行速度。</p>
<p>这个问题有一个很有趣的变形，用三元运算符替换 if 分支，这样 for 循环内部变成这样</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="built_in">in</span> <span class="number">0.</span>.<span class="number">.100000</span> &#123;</div><div class="line">        <span class="keyword">for</span> n <span class="built_in">in</span> datas &#123;</div><div class="line">            <span class="built_in">sum</span> += n&gt;<span class="number">128</span> ? n : <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>数据保持同样，运行输出</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Time</span> <span class="selector-tag">elapsed</span> <span class="keyword">when</span> <span class="attribute">unsorted</span>: <span class="number">3.60081201791763</span></div><div class="line">Time elapsed <span class="keyword">when</span> <span class="attribute">sorted</span>: <span class="number">3.55997401475906</span></div></pre></td></tr></table></figure>
<p>在面对分支做预测的过程中如果预测错会有很大的延迟，如果一直预测正确则运行过程可以类似并行一般快速运行。三元运算符转化为操作介于两者之间他会每次等一小下，这样不会有大的延迟发生但是比始终预测正确要慢。这或许是许多语言中包含这个唯一的三元运算符的原因之一。</p>
<p><strong>问题来源</strong><br><a href="http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array" target="_blank" rel="external">http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array</a></p>
<h3 id="2-_Denormal_number"><a href="#2-_Denormal_number" class="headerlink" title="2.  Denormal number"></a>2.  Denormal number</h3><p><strong>实验</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> floating = [<span class="literal">false</span>, <span class="literal">true</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> isFloat <span class="keyword">in</span> floating &#123;</div><div class="line">    <span class="keyword">let</span> x = [<span class="number">1.1</span>,<span class="number">1.2</span>,<span class="number">1.3</span>,<span class="number">1.4</span>,<span class="number">1.5</span>,<span class="number">1.6</span>,<span class="number">1.7</span>,<span class="number">1.8</span>,<span class="number">1.9</span>,<span class="number">2.0</span>,<span class="number">2.1</span>,<span class="number">2.2</span>,<span class="number">2.3</span>,<span class="number">2.4</span>,<span class="number">2.5</span>,<span class="number">2.6</span>]</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> z = [<span class="number">1.123</span>,<span class="number">1.234</span>,<span class="number">1.345</span>,<span class="number">156.467</span>,<span class="number">1.578</span>,<span class="number">1.689</span>,<span class="number">1.790</span>,<span class="number">1.812</span>,<span class="number">1.923</span>,<span class="number">2.034</span>,<span class="number">2.145</span>,<span class="number">2.256</span>,<span class="number">2.367</span>,<span class="number">2.478</span>,<span class="number">2.589</span>,<span class="number">2.690</span>]</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> y = <span class="type">Array</span>(<span class="built_in">count</span>: <span class="number">16</span>, repeatedValue: <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (index, n) <span class="keyword">in</span> x.<span class="built_in">enumerate</span>() &#123;</div><div class="line">        y[index] = n</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> start = <span class="type">NSDate</span>()</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...<span class="number">9000000</span> &#123;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">15</span> &#123;</div><div class="line">            y[i]*=x[i]</div><div class="line">            y[i]/=z[i]</div><div class="line">            <span class="keyword">if</span> isFloat &#123;</div><div class="line">                y[i]=y[i]+<span class="number">0.1</span></div><div class="line">                y[i]=y[i]-<span class="number">0.1</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                y[i]=y[i]+<span class="number">0</span></div><div class="line">                y[i]=y[i]-<span class="number">0</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> j == <span class="number">100000</span> &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"<span class="subst">\(y[i])</span>  "</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Time elapsed when <span class="subst">\(isFloat ? "floating":"unfloating")</span>: <span class="subst">\(NSDate()</span>.timeIntervalSinceDate(start))"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>输出</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">9<span class="selector-class">.38724727098368e-323</span>  </div><div class="line">7<span class="selector-class">.90505033345994e-323</span>  </div><div class="line"><span class="selector-tag">Time</span> <span class="selector-tag">elapsed</span> <span class="selector-tag">when</span> <span class="selector-tag">unfloating</span>: 15<span class="selector-class">.5163140296936</span></div><div class="line">……</div><div class="line">1<span class="selector-class">.94289029309402e-16</span>  </div><div class="line">1<span class="selector-class">.94289029309402e-16</span>  </div><div class="line"><span class="selector-tag">Time</span> <span class="selector-tag">elapsed</span> <span class="selector-tag">when</span> <span class="selector-tag">floating</span>: 0<span class="selector-class">.695216000080109</span></div></pre></td></tr></table></figure>
<p>这个例子里面造成时间差异的是 <a href="https://en.wikipedia.org/wiki/Denormal_number" target="_blank" rel="external">Denormal number</a> ，Double 类型数据的范围大约是1.79769e+308 ~ 2.22507e-308，在上面的输出里如果加减 0 后面得到的数据在计算机里的表示9.38724727098368e-323是在这个类型的范围之外的，这种数据就是 Denormal number，在实际使用的过程中这种数据出现的可能很小，所以处理器对这种数据的处理会比较慢。</p>
<p><strong>问题来源</strong><br><a href="http://stackoverflow.com/questions/9314534/why-does-changing-0-1f-to-0-slow-down-performance-by-10x" target="_blank" rel="external">http://stackoverflow.com/questions/9314534/why-does-changing-0-1f-to-0-slow-down-performance-by-10x</a></p>
<h3 id="3-_Loop_interchange"><a href="#3-_Loop_interchange" class="headerlink" title="3. Loop interchange"></a>3. Loop interchange</h3><p><strong>实验</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> data1 = Array(count: <span class="number">10000</span>, repeatedValue: Array(count: <span class="number">10000</span>, repeatedValue: <span class="number">0</span>))</div><div class="line">let start1 = NSDate()</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10000</span> &#123;</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10000</span> &#123;</div><div class="line">        data1[i][j] = i+j</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"Time elapsed: \(NSDate().timeIntervalSinceDate(start1))"</span>)</span></span></div><div class="line"><span class="selector-tag">var</span> data2 = Array(count: <span class="number">10000</span>, repeatedValue: Array(count: <span class="number">10000</span>, repeatedValue: <span class="number">0</span>))</div><div class="line">let start2 = NSDate()</div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10000</span> &#123;</div><div class="line">    <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10000</span> &#123;</div><div class="line">        data2[i][j] = i+j</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"Time elapsed: \(NSDate().timeIntervalSinceDate(start2))"</span>)</span></span></div></pre></td></tr></table></figure>
<p><strong>输出</strong></p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Time</span> elapsed: <span class="number">1.00041896104813</span></div><div class="line"><span class="keyword">Time</span> elapsed: <span class="number">4.22464299201965</span></div></pre></td></tr></table></figure>
<p>从这个结果来看可以初步推测 Swift 和 C 一样是 row-major order，也就是二维数组中同一行的数据顺序存储，这种存储形式在按列读写数据的时候会出现很多处理器的 cache misses 从而相对增加了操作需要的时间。</p>
<p><strong>问题来源</strong><br><a href="http://stackoverflow.com/questions/9936132/why-does-the-order-of-the-loops-affect-performance-when-iterating-over-a-2d-arra" target="_blank" rel="external">http://stackoverflow.com/questions/9936132/why-does-the-order-of-the-loops-affect-performance-when-iterating-over-a-2d-arra</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-__u6392_u5E8F_u8FC7_u7684_u6570_u7EC4_u904D_u5386_u66F4_u5FEB"><a href="#1-__u6392_u5E8F_u8FC7_u7684_u6570_u7EC4_u904D_u5386_u66F4]]>
    </summary>
    
      <category term="Swift" scheme="http://blog.fengweizhou.com/tags/Swift/"/>
    
      <category term="Swift" scheme="http://blog.fengweizhou.com/categories/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[函数式与过程式编程区别之赋值行为]]></title>
    <link href="http://blog.fengweizhou.com/2015/11/18/middle-status/"/>
    <id>http://blog.fengweizhou.com/2015/11/18/middle-status/</id>
    <published>2015-11-18T05:03:37.000Z</published>
    <updated>2016-01-21T04:10:35.000Z</updated>
    <content type="html"><![CDATA[<p>对于常见的过程式编程语言赋值行为和定义变量是同一种形式，都是用等号进行。对于函数式编程语言来说定义和赋值有着显著区别。</p>
<p>由于过程式编程更”容易”进行赋值所以经常采用在整个作用过程中使用起记录作用的状态变量，用一个获取 Fibonacci 前N 项中偶数的函数做示例：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">evenFibs1</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; &#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">1</span>, <span class="built_in">count</span> = n</div><div class="line">    result.append(<span class="number">0</span>)</div><div class="line">    <span class="keyword">while</span> <span class="built_in">count</span> &gt; <span class="number">2</span> &#123;</div><div class="line">        (x, y) = (y, x+y)</div><div class="line">        <span class="keyword">if</span> y%<span class="number">2</span> == <span class="number">0</span> &#123; result.append(y) &#125;</div><div class="line">        <span class="built_in">count</span>--</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">evenFibs2</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; &#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">var</span> tmpArray = [<span class="number">0</span>, <span class="number">1</span>]</div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">fib2Inside</span><span class="params">(m: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">            <span class="keyword">if</span> m &gt;= tmpArray.<span class="built_in">count</span> &#123;</div><div class="line">                tmpArray.append(fib2Inside(m-<span class="number">1</span>) + fib2Inside(m-<span class="number">2</span>))</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> tmpArray[m]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fib2Inside(n)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEven</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</div><div class="line">        <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;(<span class="number">0</span>..&lt;n).<span class="built_in">map</span>(fib).<span class="built_in">filter</span>(isEven)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法一中使用一个局部变量作为盛放结果的容器，不断将这一变量赋值为新的值，在方法的最后返回这个值，而方法二则是直接作用于一个数组得到结果。</p>
<p>这两种方法对比，显然方法一的效率更好一些，方法二是在模块化的方面更显著一些，模块化意味着这个方法很容易抽象为一个对数组每个值作用然后过滤的函数，作用函数和过滤函数都可以轻易的更换，而方法一的变更就没有那么容易了。事实上方法二里面的 fib 函数为了求值效率是按照方法一的思路实现的。</p>
<p>因为使用赋值带来的另一个区别是，过程式编程语言中不同语句之间的顺序对于程序正确运行来说很重要，对比求阶乘的两种写法：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">func factorial1(n: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</div><div class="line">    var <span class="built_in">product</span> = <span class="number">1</span>, counter = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> counter &lt;= n &#123;</div><div class="line">        <span class="built_in">product</span> = counter*<span class="built_in">product</span></div><div class="line">        counter+=<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">product</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">func factorial2(n: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</div><div class="line">    func iter(<span class="built_in">product</span> <span class="built_in">product</span>: <span class="built_in">Int</span>, counter: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</div><div class="line">        <span class="keyword">if</span> counter &gt; n &#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">product</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> iter(<span class="built_in">product</span>: counter*<span class="built_in">product</span>, counter: counter+<span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> iter(<span class="built_in">product</span>: <span class="number">1</span>, counter: <span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法一中while循环里的语句是绝对不能调换位置的。说明这个问题的一个更好的例子是，下面这两种定义 x y 的方法</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">y</span> = x * <span class="number">2</span></div><div class="line"><span class="attr">x</span> = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="attr">x</span> = <span class="number">3</span></div><div class="line"><span class="attr">y</span> = x * <span class="number">2</span></div></pre></td></tr></table></figure>
<p>在函数式语言中两种定义方法定义出的 x y 值是一样的，而一般的过程式语言则要看第一种定义方法之前 x 的值是什么才能决定 y 的值。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于常见的过程式编程语言赋值行为和定义变量是同一种形式，都是用等号进行。对于函数式编程语言来说定义和赋值有着显著区别。</p>
<p>由于过程式编程更”容易”进行赋值所以经常采用在整个作用过程中使用起记录作用的状态变量，用一个获取 Fibonacci 前N 项中偶数的函数做]]>
    </summary>
    
      <category term="函数式编程" scheme="http://blog.fengweizhou.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="计算机科学" scheme="http://blog.fengweizhou.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[复合数据分层设计求数独解的例子]]></title>
    <link href="http://blog.fengweizhou.com/2015/11/13/solve-sudoku/"/>
    <id>http://blog.fengweizhou.com/2015/11/13/solve-sudoku/</id>
    <published>2015-11-13T15:26:19.000Z</published>
    <updated>2015-12-30T15:27:56.000Z</updated>
    <content type="html"><![CDATA[<p>由编程语言自带的数据结构种类有限，在解决实际问题中设计适和的复合数据类型更有利于程序的组织和迭代。复合数据的分层设计一般可以分为三层：最底层是复合数据的实现，上层是复合数据的使用方法，最上层是复合数据使用方法的应用。</p>
<p>在这个例子中，最底层使用数组作为数独数据的实现，在上层使用 struct 的初始化函数、subscript 中的  getter 和 setter，最后基于getter和setter实现数独求解的各个步骤。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SudokuError</span>: <span class="title">ErrorType</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> initDataError</div><div class="line">    <span class="keyword">case</span> invalidSudoku</div><div class="line">    <span class="keyword">case</span> subscriptOutOfRange</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sudoku</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> data = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(array: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;) <span class="keyword">throws</span> &#123;</div><div class="line">        <span class="keyword">guard</span> array.<span class="built_in">count</span> == <span class="number">81</span> <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">SudokuError</span>.initDataError &#125;</div><div class="line">        data = array</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isRangeValid</span><span class="params">(row: Int, column: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span> &lt;= row &amp;&amp; row &lt; <span class="number">9</span> &amp;&amp; <span class="number">0</span> &lt;= column &amp;&amp; column &lt; <span class="number">9</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">subscript</span>(row: <span class="type">Int</span>, column: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> data[row*<span class="number">9</span>+column]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            data[row*<span class="number">9</span>+column] = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">solve</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">        <span class="keyword">var</span> emptyCells = <span class="type">Array</span>&lt;(<span class="type">Int</span>, <span class="type">Int</span>)&gt;()</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">8</span> &#123;</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...<span class="number">8</span> &#123;</div><div class="line">                <span class="keyword">if</span> <span class="keyword">self</span>[i, j] == <span class="number">0</span> &#123;</div><div class="line">                    emptyCells.append((i, j))</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> index = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> index &lt; emptyCells.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">let</span> (a, b) = emptyCells[index]</div><div class="line">            <span class="keyword">if</span> <span class="keyword">self</span>[a, b] &lt; <span class="number">9</span> &#123;</div><div class="line">                <span class="keyword">self</span>[a, b]++</div><div class="line">                <span class="keyword">if</span> isSafe(a, y: b) &#123;</div><div class="line">                    index++</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">self</span>[a, b] = <span class="number">0</span></div><div class="line">                index--</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> index &lt; <span class="number">0</span> &#123; <span class="keyword">throw</span> <span class="type">SudokuError</span>.invalidSudoku &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isSafe</span><span class="params">(x: Int, y: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> isRowSafe(x, y: y) &amp;&amp; isColumnSafe(x, y: y) &amp;&amp; isCellSafe(x, y: y)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isRowSafe</span><span class="params">(x: Int, y: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">8</span> &#123;</div><div class="line">            <span class="keyword">if</span> i != y &amp;&amp; <span class="keyword">self</span>[x, y] == <span class="keyword">self</span>[x, i] &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isColumnSafe</span><span class="params">(x: Int, y: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">8</span> &#123;</div><div class="line">            <span class="keyword">if</span> i != x &amp;&amp; <span class="keyword">self</span>[x, y] == <span class="keyword">self</span>[i, y] &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">isCellSafe</span><span class="params">(x: Int, y: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> a = x/<span class="number">3</span>, b = y/<span class="number">3</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">3</span>*a...(<span class="number">3</span>*a+<span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">3</span>*b...(<span class="number">3</span>*b+<span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">if</span> i != x &amp;&amp; j != y &amp;&amp; <span class="keyword">self</span>[x, y] == <span class="keyword">self</span>[i, j] &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">var</span> output = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">8</span> &#123;</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...<span class="number">8</span> &#123;</div><div class="line">                output.appendContentsOf(<span class="string">"<span class="subst">\(<span class="keyword">self</span>[i,j])</span> "</span>)</div><div class="line">                <span class="keyword">if</span> j == <span class="number">8</span> &#123;output.appendContentsOf(<span class="string">"\n"</span>)&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> output</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> data = [<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,</div><div class="line">                <span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,</div><div class="line">                <span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">6</span>,</div><div class="line">                <span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</div><div class="line">                <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</div><div class="line">                <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,</div><div class="line">                <span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,</div><div class="line">                <span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,</div><div class="line">                <span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>]</div><div class="line">    <span class="keyword">var</span> theSudoku = <span class="keyword">try</span> <span class="type">Sudoku</span>(array: data)</div><div class="line">    <span class="keyword">try</span> theSudoku.solve()</div><div class="line">    <span class="built_in">print</span>(theSudoku)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">SudokuError</span>.initDataError &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"The count of init array isn't 81"</span>)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">SudokuError</span>.invalidSudoku &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"This is not a valid sudoku"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对比以前写过的版本，这个实现多出了 subscript 中的 getter setter 方法，增加这两个方法隔离开了解数独的过程和实现数独数据的具体细节，假如要换一种数独的实现方式，只需要修改其中的构造函数和 subscript 其他函数例如 solve() 完全不需要改动，这就是复合数据抽象的好处。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由编程语言自带的数据结构种类有限，在解决实际问题中设计适和的复合数据类型更有利于程序的组织和迭代。复合数据的分层设计一般可以分为三层：最底层是复合数据的实现，上层是复合数据的使用方法，最上层是复合数据使用方法的应用。</p>
<p>在这个例子中，最底层使用数组作为数独数据的]]>
    </summary>
    
      <category term="数独" scheme="http://blog.fengweizhou.com/tags/%E6%95%B0%E7%8B%AC/"/>
    
      <category term="复合数据抽象" scheme="http://blog.fengweizhou.com/tags/%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/"/>
    
      <category term="计算机科学" scheme="http://blog.fengweizhou.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用过程复合数据]]></title>
    <link href="http://blog.fengweizhou.com/2015/11/12/church-numerals/"/>
    <id>http://blog.fengweizhou.com/2015/11/12/church-numerals/</id>
    <published>2015-11-12T04:34:05.000Z</published>
    <updated>2016-10-10T15:10:03.000Z</updated>
    <content type="html"><![CDATA[<p>复合数据只要拥有满足一定条件的构造函数、选择函数和约束规则，甚至不需要是由基本数据复合，church 计数是一个以 lambda 表达式为唯一元素，构建数值、数值运算等编程要素的系统，在church 计数中 0 和 加1 运算分别被定义为</p>
<a id="more"></a>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func zero&lt;<span class="literal">T</span>&gt;(f:(<span class="literal">T</span>-&gt;<span class="literal">T</span>)) -&gt; <span class="literal">T</span>-&gt;<span class="literal">T</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;x <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> x&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func add_1&lt;<span class="literal">T</span>&gt;(n:(<span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; <span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; (<span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; <span class="literal">T</span>-&gt;<span class="literal">T</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;f <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> &#123;x <span class="keyword">in</span></div><div class="line">            <span class="keyword">return</span> f(n(f)(x))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>0 是一个以函数为参数返回一个函数的过程，加1 运算是作用于类似 0 这样的过程之上返回一个新过程的函数，将 0 带入 加1 运算得到 1 的定义，带入 1 得到 2 的定义</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">one</span>&lt;T&gt;<span class="params">(f:<span class="params">(T-&gt;T)</span></span></span>) -&gt; <span class="type">T</span>-&gt;<span class="type">T</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;x <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> f(x)&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">two</span>&lt;T&gt;<span class="params">(f:<span class="params">(T-&gt;T)</span></span></span>) -&gt; <span class="type">T</span>-&gt;<span class="type">T</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;x <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> f(f(x))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>形式上讲 church 计数的正整数可以看做应用参数函数的过程，0 是应用 0 次直接返回原值，1 是返回应用 1 次得到的返回值，以此类推。加法的定义是先应用第一个加数次，再应用第二个加数次，乘法是应用次数之积次</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">func plus&lt;<span class="literal">T</span>&gt;(operand1 operand1: (<span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; <span class="literal">T</span>-&gt;<span class="literal">T</span>, operand2: (<span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; <span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; (<span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; <span class="literal">T</span>-&gt;<span class="literal">T</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;f <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> &#123;x <span class="keyword">in</span></div><div class="line">            <span class="keyword">return</span> operand2(f)(operand1(f)(x))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func mult&lt;<span class="literal">T</span>&gt;(operand1 operand1: (<span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; <span class="literal">T</span>-&gt;<span class="literal">T</span>, operand2: (<span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; <span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; (<span class="literal">T</span>-&gt;<span class="literal">T</span>) -&gt; <span class="literal">T</span>-&gt;<span class="literal">T</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;f <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> &#123;x <span class="keyword">in</span></div><div class="line">            <span class="keyword">return</span> operand2(operand1(f))(x)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>减法的定义先考虑简单的情况，任意给定一个过程进行减 1，从概念上讲应该是应用给定过程的减 1 次，实现方法：</p>
<p><img src="1.jpg" alt=""> </p>
<p>我没想出来</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>复合数据只要拥有满足一定条件的构造函数、选择函数和约束规则，甚至不需要是由基本数据复合，church 计数是一个以 lambda 表达式为唯一元素，构建数值、数值运算等编程要素的系统，在church 计数中 0 和 加1 运算分别被定义为</p>]]>
    
    </summary>
    
      <category term="church计数" scheme="http://blog.fengweizhou.com/tags/church%E8%AE%A1%E6%95%B0/"/>
    
      <category term="计算机科学" scheme="http://blog.fengweizhou.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[构建过程抽象]]></title>
    <link href="http://blog.fengweizhou.com/2015/11/09/procedure-abstraction/"/>
    <id>http://blog.fengweizhou.com/2015/11/09/procedure-abstraction/</id>
    <published>2015-11-09T14:54:21.000Z</published>
    <updated>2016-10-10T15:11:21.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>3）将有关认识与那些在实际中和他同在的所有其他认识隔离开，这就是抽象<br>SICP 第一章<br>现存的许多威力强大的程序设计技术，都依赖于填平在「被动的」数据和「主动的」过程之间的传统划分<br>SICP 第一章</p>
</blockquote>
<a id="more"></a>
<p>计算机程序是由需要被操作的「数据」和操作数据的「过程」构成。解释起来可以说是一静一动，数据所代表的静态的具体某个值，而过程则是动态的代表从一个值到另一个值的转化。和数学研究很像不光研究函数对值的作用，还研究函数本身，计算机编程过程中也不光用过程作用于数据，也可以处理过程本身就像作用于数据之上那样。</p>
<h3 id="u8FC7_u7A0B_u4F5C_u4E3A_u53C2_u6570"><a href="#u8FC7_u7A0B_u4F5C_u4E3A_u53C2_u6570" class="headerlink" title="过程作为参数"></a>过程作为参数</h3><p>通过区间折半寻找方程的一个根</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> searchError: ErrorType &#123;</div><div class="line">    <span class="keyword">case</span> sameSign</div><div class="line">&#125;</div><div class="line"></div><div class="line">func isCloseEnough(x x: <span class="keyword">Double</span>, y: <span class="keyword">Double</span>) -&gt; Bool &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x-y) &lt; <span class="number">0.001</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">func search(<span class="function"><span class="keyword">function</span></span> f: (<span class="keyword">Double</span>)-&gt;<span class="keyword">Double</span>, negPoint: <span class="keyword">Double</span>, posPoint: <span class="keyword">Double</span>) -&gt; <span class="keyword">Double</span> &#123;</div><div class="line">    let midPoint = (negPoint+posPoint)/<span class="number">2</span></div><div class="line">    <span class="keyword">if</span> isCloseEnough(x: negPoint, y: posPoint) &#123;</div><div class="line">        <span class="keyword">return</span> midPoint</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> f(midPoint) &lt; <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> search(<span class="function"><span class="keyword">function</span></span>: f, negPoint: midPoint, posPoint: posPoint)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> search(<span class="function"><span class="keyword">function</span></span>: f, negPoint: negPoint, posPoint: midPoint)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func halfIntervalSearch(<span class="function"><span class="keyword">function</span></span> f:(<span class="keyword">Double</span>)-&gt;<span class="keyword">Double</span>, x: <span class="keyword">Double</span>, y: <span class="keyword">Double</span>) throws -&gt; <span class="keyword">Double</span> &#123;</div><div class="line">    let a = f(x), b = f(y)</div><div class="line">    <span class="keyword">if</span> a &gt; <span class="number">0</span> &amp;&amp; b &lt; <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> search(<span class="function"><span class="keyword">function</span></span>: f, negPoint: y, posPoint: x)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> a &lt; <span class="number">0</span> &amp;&amp; b &gt; <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> search(<span class="function"><span class="keyword">function</span></span>: f, negPoint: x, posPoint: y)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        throw searchError.sameSign</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func f(x: <span class="keyword">Double</span>) -&gt; <span class="keyword">Double</span> &#123;</div><div class="line">    <span class="keyword">return</span> x*x*x - <span class="number">2</span>*x - <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    let result = try halfIntervalSearch(<span class="function"><span class="keyword">function</span></span>: f, x: <span class="number">1</span>, y: <span class="number">2</span>)</div><div class="line">    <span class="built_in">print</span>(result)</div><div class="line">&#125; catch &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"error"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中函数 f 作为参数可以换成其他形式</p>
<h3 id="u8FC7_u7A0B_u4F5C_u4E3A_u8FD4_u56DE_u503C"><a href="#u8FC7_u7A0B_u4F5C_u4E3A_u8FD4_u56DE_u503C" class="headerlink" title="过程作为返回值"></a>过程作为返回值</h3><p>函数求导</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">func deriv<span class="function"><span class="params">(<span class="keyword">function</span> f:(Double)-&gt;Double)</span> -&gt;</span> <span class="function"><span class="params">(Double)</span>-&gt;</span>Double &#123;</div><div class="line">    <span class="keyword">let</span> dx = <span class="number">0.00001</span></div><div class="line">    <span class="keyword">return</span> &#123;<span class="function"><span class="params">(x:Double)</span>-&gt;</span>Double <span class="keyword">in</span> (f(x+dx)-f(x))/dx&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func cube<span class="function"><span class="params">(x:Double)</span> -&gt;</span> Double &#123;</div><div class="line">    <span class="keyword">return</span> x*x*x</div><div class="line">&#125;</div><div class="line"></div><div class="line">deriv(function: cube)(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="u8FC7_u7A0B_u7684_u5355_u4E00_u8D23_u4EFB_u539F_u5219"><a href="#u8FC7_u7A0B_u7684_u5355_u4E00_u8D23_u4EFB_u539F_u5219" class="headerlink" title="过程的单一责任原则"></a>过程的单一责任原则</h3><p>过程是可以复合定义的，良好的定义应当保持各部分的解耦，例如第一个例子中对 <code>isCloseEnough</code> 过程的调整就可以做到完全不影响其他过程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>3）将有关认识与那些在实际中和他同在的所有其他认识隔离开，这就是抽象<br>SICP 第一章<br>现存的许多威力强大的程序设计技术，都依赖于填平在「被动的」数据和「主动的」过程之间的传统划分<br>SICP 第一章</p>
</blockquote>]]>
    
    </summary>
    
      <category term="抽象" scheme="http://blog.fengweizhou.com/tags/%E6%8A%BD%E8%B1%A1/"/>
    
      <category term="计算机科学" scheme="http://blog.fengweizhou.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[递归、动态规划和迭代]]></title>
    <link href="http://blog.fengweizhou.com/2015/11/02/recursion/"/>
    <id>http://blog.fengweizhou.com/2015/11/02/recursion/</id>
    <published>2015-11-01T16:59:06.000Z</published>
    <updated>2016-10-10T15:11:42.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>每一个计算机程序都是现实中或者精神中的某一个过程的一个模型<br>SICP 序<br>在这一层次的课程里，最基本的材料并不是特定的程序设计语言语法，不是有效计算某种功能的巧妙算法，也不是算法的数学分析或者计算的本质，而是一些能够用于控制大型软件系统的智力复杂性的技术<br>SICP 前言</p>
</blockquote>
<a id="more"></a>
<p>计算机程序中对象可以大体分为两类：数据和过程。数据是那些需要去操作的东西，过程则是具体操作的指令。要求解复合过程的结果需要先得到子过程的结果，求子过程的结果需要得到子过程的子过程的结果，一次类推直到某一层子过程是最基本的表达式得到求值结果，这就是递归。</p>
<h3 id="u9012_u5F52_u7684_u7B80_u5355_u5E94_u7528_uFF0C_u6B27_u51E0_u91CC_u5F97_u7B97_u6CD5_u6C42_u6700_u5927_u516C_u7EA6_u6570"><a href="#u9012_u5F52_u7684_u7B80_u5355_u5E94_u7528_uFF0C_u6B27_u51E0_u91CC_u5F97_u7B97_u6CD5_u6C42_u6700_u5927_u516C_u7EA6_u6570" class="headerlink" title="递归的简单应用，欧几里得算法求最大公约数"></a>递归的简单应用，欧几里得算法求最大公约数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">func gcd(x x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> y == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> gcd(x: y, y: x%y)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Fibonacci__u6570_u5217_u6C42_u503C"><a href="#Fibonacci__u6570_u5217_u6C42_u503C" class="headerlink" title="Fibonacci 数列求值"></a>Fibonacci 数列求值</h3><p>Fibonacci 数列的定义本身就是递归的，可以很自然的写成：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib1</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">switch</span> n &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> fib1(n-<span class="number">1</span>) + fib1(n-<span class="number">2</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法在求解的过程中所需的步数随着n的增加增长阶是O(2^n)，仔细观察递归过程中同样的值重复计算了很多次，于是可以优化在计算过程中把结果保留下来，这种做法被归类为 Dynamic Programming 方法，没想到的是中文翻译居然是动态规划</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib2</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> tmpArray = [<span class="number">0</span>, <span class="number">1</span>]</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fib2Inside</span><span class="params">(m: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">if</span> m &gt;= tmpArray.<span class="built_in">count</span> &#123;</div><div class="line">            tmpArray.append(fib2Inside(m-<span class="number">1</span>) + fib2Inside(m-<span class="number">2</span>))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> tmpArray[m]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fib2Inside(n)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在递归中有一类尾递归，可能也可以叫伪递归，是在递归的过程中保留全部状态，其实就是一种迭代，这种计算方式要快于一般的递归。如果递归解决的思路是从后往前的，那么迭代刚好相反是从前往后</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib3</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fibIter</span><span class="params">(a: Int, b: Int, <span class="built_in">count</span>: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> b</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> fibIter(a+b, b: a, <span class="built_in">count</span>: <span class="built_in">count</span>-<span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fibIter(<span class="number">1</span>, b: <span class="number">0</span>, <span class="built_in">count</span>: n)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib4</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> n &gt; <span class="number">1</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> n</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = n, x = <span class="number">0</span>, y = <span class="number">1</span></div><div class="line">    <span class="keyword">repeat</span> &#123;</div><div class="line">        (x, y) = (y, x+y)</div><div class="line">        <span class="built_in">count</span>--</div><div class="line">    &#125; <span class="keyword">while</span> <span class="built_in">count</span> &gt; <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> y</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用迭代的方式计算，计算步数相对于n的增长阶是O(n)，如果要继续精简这个计算过程发现每次迭代的变化都是一样的，那么将两次迭代的过程合为一次，那么所需步骤数就可以减半，最后得到时间复杂度为 O(logn) 的方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib5</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">guard</span> n &gt; <span class="number">1</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> n</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = n+<span class="number">1</span>, x = <span class="number">0</span> , y = <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> <span class="built_in">count</span> % <span class="number">2</span> != <span class="number">0</span> &#123;</div><div class="line">        (x, y) = (y, x+y)</div><div class="line">        <span class="built_in">count</span>--</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> countHalf = <span class="built_in">count</span>/<span class="number">2</span></div><div class="line">    <span class="keyword">repeat</span> &#123;</div><div class="line">        (x, y) = (x+y, x+<span class="number">2</span>*y)</div><div class="line">        countHalf--</div><div class="line">    &#125; <span class="keyword">while</span> countHalf &gt; <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> y</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="u96F6_u94B1_u7EC4_u5408_u95EE_u9898"><a href="#u96F6_u94B1_u7EC4_u5408_u95EE_u9898" class="headerlink" title="零钱组合问题"></a>零钱组合问题</h3><p>给定一个金额 N，计算有多少种不同的零钱组合方式。这个问题应用递归就没有上一个那么直观，但只需要找出分解问题并且子问题和问题本身是同一类问题的方式。将换算组合个数分为两部分，没有一种面值的组合个数加上至少有一张这种面值的组合个数</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cc1</span><span class="params">(amount: Int, denomination: Array&lt;Int&gt;)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span> amount &lt; <span class="number">0</span> || denomination.<span class="built_in">count</span> == <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</div><div class="line">    <span class="keyword">if</span> amount == <span class="number">0</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</div><div class="line">    <span class="keyword">var</span> deno = denomination</div><div class="line">    deno.removeLast()</div><div class="line">    <span class="keyword">return</span> cc1(amount - denomination[denomination.<span class="built_in">count</span>-<span class="number">1</span>], denomination: denomination) + cc1(amount, denomination: deno)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Dynamic Programming 的思想下优化，用一个表的行列代表金额数和不同面值个数，在表中存储计算过的个数</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cc2</span><span class="params">(amount: Int, denomination: Array&lt;Int&gt;)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> table = <span class="type">Array</span>(<span class="built_in">count</span>: amount+<span class="number">1</span>, repeatedValue: <span class="type">Array</span>(<span class="built_in">count</span>: denomination.<span class="built_in">count</span>+<span class="number">1</span>, repeatedValue: -<span class="number">1</span>))</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> j &lt; denomination.<span class="built_in">count</span>+<span class="number">1</span> &#123;</div><div class="line">        table[<span class="number">0</span>][j] = <span class="number">1</span></div><div class="line">        j++</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> i &lt; amount+<span class="number">1</span> &#123;</div><div class="line">        table[i][<span class="number">0</span>] = <span class="number">0</span></div><div class="line">        i++</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cc2Inside</span><span class="params">(amount2: Int, denomination2: Array&lt;Int&gt;)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">if</span> amount2 &lt; <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> table[amount2][denomination2.<span class="built_in">count</span>] == -<span class="number">1</span> &#123;</div><div class="line">            <span class="keyword">var</span> deno = denomination2</div><div class="line">            deno.removeLast()</div><div class="line">            table[amount2][denomination2.<span class="built_in">count</span>] = cc2Inside(amount2-denomination2[denomination2.<span class="built_in">count</span>-<span class="number">1</span>], denomination2: denomination2) + cc2Inside(amount2, denomination2: deno)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> table[amount2][denomination2.<span class="built_in">count</span>]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cc2Inside(amount, denomination2: denomination)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个问题也可以迭代，但是我是没能想出来，搜到的一种做法是</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">func cc3(amount: Int, denomination: Array&lt;Int&gt;) -&gt; Int &#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">table</span> = Array(<span class="keyword">count</span>: amount+1, repeatedValue: 0)</div><div class="line">    <span class="keyword">table</span>[0] = 1</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=0; i&lt;denomination.<span class="keyword">count</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=denomination[i]; j&lt;=amount; j++) &#123;</div><div class="line">            <span class="keyword">table</span>[j] += <span class="keyword">table</span>[j-denomination[i]]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">table</span>[amount]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显然相比之下递归的代码更容易读懂</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>每一个计算机程序都是现实中或者精神中的某一个过程的一个模型<br>SICP 序<br>在这一层次的课程里，最基本的材料并不是特定的程序设计语言语法，不是有效计算某种功能的巧妙算法，也不是算法的数学分析或者计算的本质，而是一些能够用于控制大型软件系统的智力复杂性的技术<br>SICP 前言</p>
</blockquote>]]>
    
    </summary>
    
      <category term="递归" scheme="http://blog.fengweizhou.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="计算机科学" scheme="http://blog.fengweizhou.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[有关动力的模型]]></title>
    <link href="http://blog.fengweizhou.com/2015/10/23/motivation-pattern/"/>
    <id>http://blog.fengweizhou.com/2015/10/23/motivation-pattern/</id>
    <published>2015-10-23T02:41:35.000Z</published>
    <updated>2015-12-31T02:46:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u7F18_u8D77"><a href="#u7F18_u8D77" class="headerlink" title="缘起"></a>缘起</h3><p>可能和许多人一样我也有一些曾经想要学习然而却最终没有去进行学习的目标，需要举起例子的话很容易，不过我更想弄明白的是这些例子背后共通的原因。这就引发了我对动力的思考。</p>
<h3 id="u4EC0_u4E48_u662F_u52A8_u529B_uFF1F"><a href="#u4EC0_u4E48_u662F_u52A8_u529B_uFF1F" class="headerlink" title="什么是动力？"></a>什么是动力？</h3><p>首先先建立一个认识模型：</p>
<blockquote>
<p> 一个人的精神活动由两部分组成：一是由大脑皮层控制的理性，二是由大脑内部脑干等控制的感性。</p>
</blockquote>
<p>简单的对这两个组成部分进行一个解释：</p>
<p>理性，是一个人在后天的生活环境中通过社会环境的潜移默化和自己的主动学习培养起来的用于控制自己的一种能力，比如各种道德观念，有的时候可以称之为意识。</p>
<p>感性，是一个人继承自生物本能的应对外界刺激的能力，比如情绪，也可以称之为潜意识，但我理解这里所使用的潜字并不是隐藏起来的意思，而是虽然知道他的存在却不能直接操纵的意思。</p>
<p>理性是人可以直接操控的。例如，一个人在面领两个不同选择时会理性的选择更有利于自己的一个。而感性的控制则需要理性的间接操作。例如，你不可以直接控制自己的喜怒哀乐（情绪），但是可以通过做自己喜欢的事情激发自己的喜悦。</p>
<p>基于这个模型，我认为<strong>一个真正能有效驱动自己的动力应该是两方面的，它即是理性上应该做的，也是感性上想要做的</strong>。应该做反映在是否有利，想要做反映在是否能够为自己带来正面的情绪。</p>
<p>如果说动力就是一个目标或者因这个目标诞生的一个理由，那么一个动力一个大的目标就需要有两个子目标，才能构成一个完整的动力。一个目标是建立在外部标准之上的理性选择，比如说金钱、title；另一种目标是建立在自己的内部标准之上的是可以激发自己感性力量的，比如说是一件有趣的事。外部标准是明确的可以量化的，人人都看得懂理解得了，但内部标准恐怕往往会在别人眼里是觉得可笑的没有意义的。当我们在谈论一个目标的时候绝大多数情况下我们都是在谈论理性的目标，基于量化标准的成功，那么为什么激发自己感性力量是一个有效目标不可或缺的一部分？我认为这是因为两种力量对于人的控制<strong>理性胜在选择，感性胜在驱动</strong>，真正在起到驱动作用的其实是一个人感性的部分。在临近考试的时候你可以理性地选择挑灯夜战，但是这样的状态可以持续多久？而如果你是在做一件令你激动的事情（感性上的作用），比如打游戏刷剧，那么通宵达旦恐怕都在一瞬间。过度依赖理性的力量，你可以做出正确的事情，但是这个过程你很难去坚持，即使能够坚持在做这件事的过程中你也一定不爽；过度依赖感性的力量，你会沉迷，仅有情感性的刺激也同样是不能持续的。</p>
<h3 id="u52A8_u529B_u7684_u7F3A_u5931"><a href="#u52A8_u529B_u7684_u7F3A_u5931" class="headerlink" title="动力的缺失"></a>动力的缺失</h3><p>制定一个理性的目标是非常简单的，因为理性的目标只是一个基于明确标准的选择。但是如前面所想到的理性的目标并不能构成一个有效的完整动力，纯粹理性作用的结果就往往是你知道自己应该做什么却不想去做，悬梁刺股的刻苦可以为你带来好的结局然而你是否想过这样的结果是你真的想要的吗，功不唐捐的自我安慰真的可以替代你内心的情感需要？</p>
<p>在从小到大的受教育过程中，学到的大多是关于如何做出选择的知识，甚至学校老师在教育的过程中也在做着做出理性选择的表率，决定哪些是需要重视的主课哪些是一笔带过的副科。在初中的时候我曾经觉得一门副科很有趣，然而这种心态在老师那里只不过是参加相关竞赛的一个契机，最终不了了之。</p>
<h3 id="u7406_u6027_u7684_u6B63_u786E_u5E94_u7528"><a href="#u7406_u6027_u7684_u6B63_u786E_u5E94_u7528" class="headerlink" title="理性的正确应用"></a>理性的正确应用</h3><p>前面说到真正起到驱动作用的是感性的力量，也就是说理性并不是全部也并非全能。但是这个地方特别需要注意的是这种理性并非全能的认识正是理性本身做出的，这种能够正视和承认自身缺陷的能力才是理性最强大的地方。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u7F18_u8D77"><a href="#u7F18_u8D77" class="headerlink" title="缘起"></a>缘起</h3><p>可能和许多人一样我也有一些曾经想要学习然而却最终没有去进行学习的目标，需要举起例子的话很容易，不过我更想]]>
    </summary>
    
      <category term="动力" scheme="http://blog.fengweizhou.com/tags/%E5%8A%A8%E5%8A%9B/"/>
    
      <category term="其他" scheme="http://blog.fengweizhou.com/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git hooks 的几个用例]]></title>
    <link href="http://blog.fengweizhou.com/2015/09/22/githooks/"/>
    <id>http://blog.fengweizhou.com/2015/09/22/githooks/</id>
    <published>2015-09-21T16:02:37.000Z</published>
    <updated>2017-04-20T17:10:47.000Z</updated>
    <content type="html"><![CDATA[<p>自动化是提高开发效率的有效手段之一。在源码管理过程中要实现自动化，必须能够知道源码管理工具内部的事件进行状态，显然对于这些独立工具是没办法像在同一个程序中一样进行类似 KVO 式的外部监听，好在 Git 就像一个设计完备的库一样提供了部分关键流程的调用接口，也就是 githooks。</p>
<p>将要处理的情景是在使用 Git 做版本管理，用 Cocoapods 进行第三方库管理的项目中</p>
<ol>
<li>从服务器 pull 下来后 <code>Podfile.lock</code> 发生变化，也就是本地 pod 和服务器中的不一致，需要 <code>pod install</code></li>
<li>从服务器 pull 下来证书发生变化，在一个开发团队里每个人有自己的证书用于真机调试，需要改为自己的证书</li>
<li>切换分支后  <code>Podfile.lock</code> 发生变化，需要 <code>pod install</code></li>
</ol>
<p>githooks 本身是一个个有固定名称的脚步，相当于有固定名称的 delegate 方法，在每一次执行所绑定 git 命令时触发，例如 <code>pre-commit</code> 和  <code>post-commit</code> 分别会在 <code>git commit</code> 的前后触发，<code>githooks</code> 可以是任意系统支持运行的脚本如 Shell Perl Python Ruby。</p>
<p><code>githooks</code> 支持绑定的类型都列在了文档里 man githooks。为了实现场景1、2的自动化需要使用的是 <code>post-merge</code> 。<code>post-merge</code> 绑定的命令是 `git merge 和 git pull，post 前缀类型的 githook 不能影响 git 命令本身的执行，pre 前缀的 hook 可以。新版本的 git 项目在初始化的时候在根目录都建有 .git/hooks/ 目录，里面存放所有 hook ，打开这个文件夹里面默认有一些sample后缀的示例文件，去掉 .sample 这些示例才能真正运行，如果已经有 post-merge 去掉 sample 后缀，如果没有新建 post-merge 文件添加可执行权限 chmod +x post-merge，添加脚本内容：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line"><span class="comment">#1</span></div><div class="line"><span class="keyword">require</span> <span class="string">'xcodeproj'</span></div><div class="line"></div><div class="line"><span class="comment">#2</span></div><div class="line">cmd = <span class="string">' changed_files="$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)"</span></div><div class="line">echo "$changed_files" | grep --quiet "Podfile.lock" &amp;&amp; eval "pod install"</div><div class="line">echo "pod installed" '</div><div class="line"></div><div class="line">system( cmd )</div><div class="line"></div><div class="line"><span class="comment">#3</span></div><div class="line">xcproj = Xcodeproj::Project.open(<span class="string">"DroppingBall.xcodeproj"</span>)</div><div class="line"></div><div class="line">xcproj.build_configurations.each <span class="keyword">do</span> <span class="params">|item|</span></div><div class="line">    item.build_settings[<span class="string">'CODE_SIGN_IDENTITY[sdk=iphoneos*]'</span>] = <span class="string">"iOS Development: Weizhou Feng (XXXXXXXXXX)"</span></div><div class="line">    item.build_settings[<span class="string">'PROVISIONING_PROFILE[sdk=iphoneos*]'</span>] = “xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx<span class="string">"</span></div><div class="line">end</div><div class="line"></div><div class="line">#4</div><div class="line">xcproj.save</div></pre></td></tr></table></figure>
<p>第一行声明这是一个 Ruby 脚本，使用 Ruby 的原因是可以直接用 xcodeproj 这个库， cocoapods 使用这个库创建或修改xcode 的项目文件，这里需要用它修改 project.pbxproj 内容</p>
<p>#1 引入 xcodeproj 库</p>
<p>#2 pull 之后获取 git 状态还是 shell 命令方便不需要增加依赖，所以直接在脚本中调用 shell 命名可以分为三步：</p>
<ol>
<li>git diff 取得 pull 之后发生变化的所有文件名称</li>
<li>grep 判断是否包含 Podfile.lock</li>
<li>如果有执行 pod install<br>更新结束后在终端输出 pod installed</li>
</ol>
<p>#3 打开当前项目文件，DroppingBall 是这里的项目名称。读取构建模式一般有两种：Debug 和 Release，分别将其中的 build setting 选项 CODE_SIGN_IDENTITY 和 PROVISIONING_PROFILE 改为自己的，要赋的值可以现在 Xcode 中通过菜单选择正确的选项然后打开 project.pbxproj 把文本内容复制出来用</p>
<p>#4 保存</p>
<p>然后是情景3，切换分支需要的 hook 是 post-checkout，和上面一样保证 post-checkout 在文件夹里存在，添加内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">if ! diff -q &quot;Podfile.lock&quot; &quot;Pods/Manifest.lock&quot; &gt; /dev/null ; then</div><div class="line">    pod install</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>这次是 shell 脚本，所做的事情其实和 cocoapods 做的一样，只不过 cocoapods 的脚本会在 xcode 里生成一个 error: The sandbox is not in sync with the Podfile.lock. Run ‘pod install’ or update your CocoaPods installation. 这里则是直接执行 pod install</p>
<p>资源：<br><a href="http://githooks.com" target="_blank" rel="external">http://githooks.com</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自动化是提高开发效率的有效手段之一。在源码管理过程中要实现自动化，必须能够知道源码管理工具内部的事件进行状态，显然对于这些独立工具是没办法像在同一个程序中一样进行类似 KVO 式的外部监听，好在 Git 就像一个设计完备的库一样提供了部分关键流程的调用接口，也就是 gith]]>
    </summary>
    
      <category term="git" scheme="http://blog.fengweizhou.com/tags/git/"/>
    
      <category term="自动化" scheme="http://blog.fengweizhou.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="工具" scheme="http://blog.fengweizhou.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为什么数组下标从0开始]]></title>
    <link href="http://blog.fengweizhou.com/2015/07/21/why-array-start-from-0/"/>
    <id>http://blog.fengweizhou.com/2015/07/21/why-array-start-from-0/</id>
    <published>2015-07-21T13:13:44.000Z</published>
    <updated>2017-04-20T17:10:44.000Z</updated>
    <content type="html"><![CDATA[<p>从0开始记数经常被作为一个人是一名程序员的象征，在大多数主流编程语言中数组的记数都是以0为首位，今天读了 Dijkstra 的一篇旧文结合我的理解来谈谈为什么数组记数从0开始。</p>
<p>首先使用 0 作为数组第一位并不一定是一个正确的做法， 事实上也有以 1 作为首位的编程语言存在（Matlab，Fortran， Lua等），在 Dijkstra 的文章里他提出的证明思路是这样的：为表示一段离散的自然数集合例如 [4, 5, 6] 可以使用的公式有四种：<br>a. 4 ≤ i &lt; 7<br>b. 3 &lt; i ≤ 6<br>c. 4 ≤ i ≤ 6<br>d. 3 &lt; i &lt; 7</p>
<p>这四种表达方式的含义是一样的，那么他们之间是否有优劣之分？ 是有的，考虑如果数值中包含自然数的最小值，那么 bd 的表达方式中下界就要使用非自然数这样是不完美的，所以首先排除。其次考虑 ac 如果这个集合是空集，用 c 是无法表达的（右侧的值大于等于左侧），于是就得到表达集合的最佳方式 4 ≤ i &lt; 7.</p>
<p>对于包含 N 个元素的数组 array[i] 来说，对比下表的两种取值，从1开始记数是 1 ≤ i &lt; N+1, 另一种使用更多的是 0 ≤ i &lt; N, 后者看上去更 nice，并且每个元素的下标值等于在他之前元素的个数。</p>
<p>Dijkstra 是典型的计算机科学家，研究算法（Dijkstra’s algorithm）的学院派。在论证过程中的看上去更好和下标值等于之前元素个数都是很理论性的偏好，说不上是严格证明，事实上在实际使用过程中以 0 开头的数组取最后一个元素时 array[lengh-1] 才是更常见的 ugly 做法，所以在 Cocoa 里 NSArray 很早就有了 lastObject 这个方法。</p>
<p>虽然 Dijkstra 提供的论证不一定令人信服，以0作为首个元素记数还有其他一些原因：</p>
<p>对于 C 语言来说数组即指针，以 0 为首位那么 a 和 a[0] 就代表同一个值，不需要增加移动操作或者数值计算，这很可能是起初 C 会选择以 0 开始记数的原因。</p>
<p>另外对于求模运算，以 0 开始记数的数组在形式上会更整齐。</p>
<p>最后，自然数里的自然是一种理论上的自然，用0个回答冰箱里能装几个大象比装不了在形式上要统一很多，并且 0 真的是一个自然数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从0开始记数经常被作为一个人是一名程序员的象征，在大多数主流编程语言中数组的记数都是以0为首位，今天读了 Dijkstra 的一篇旧文结合我的理解来谈谈为什么数组记数从0开始。</p>
<p>首先使用 0 作为数组第一位并不一定是一个正确的做法， 事实上也有以 1 作为首位]]>
    </summary>
    
      <category term="0" scheme="http://blog.fengweizhou.com/tags/0/"/>
    
      <category term="计算机科学" scheme="http://blog.fengweizhou.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[做产品的一年]]></title>
    <link href="http://blog.fengweizhou.com/2014/12/21/one-year-as-pm/"/>
    <id>http://blog.fengweizhou.com/2014/12/21/one-year-as-pm/</id>
    <published>2014-12-21T13:02:34.000Z</published>
    <updated>2015-12-21T13:10:29.000Z</updated>
    <content type="html"><![CDATA[<p>2013年7月我毕业，开始从事一个叫做产品助理的工作，在一家互联网公司。2013年是产品这个概念最疯传的一年，那一年所有人都在谈论张小龙的产品理念，那一年所有人都要跟你谈用户体验。疯传的背后有产业真实的发展与前进，也有互联网时代典型的一哄而上。这一年我学到的：</p>
<h3 id="1-__u5C0F_u5FC3_u5728_u8BA8_u8BBA_u4E2D_u7528_u5230_u7528_u6237_u4F53_u9A8C_u8FD9_u4E2A_u8BCD_u7684_u4EBA"><a href="#1-__u5C0F_u5FC3_u5728_u8BA8_u8BBA_u4E2D_u7528_u5230_u7528_u6237_u4F53_u9A8C_u8FD9_u4E2A_u8BCD_u7684_u4EBA" class="headerlink" title="1. 小心在讨论中用到用户体验这个词的人"></a>1. 小心在讨论中用到用户体验这个词的人</h3><p>在产品讨论中直接用到用户体验这个词的人是典型的一哄而上的人，就好像有人跟你说：这个问题我们可以用大数据的方法解决一样，当他说出这种词的时候就已经暴露了他的无知，无论这种无知是有意还是无意的，小心总是没有错的。我知道这种无知再更多的场合和情景下可能是常态和客观现实，但毕竟现实是值得被讽刺得这也是客观现实。</p>
<h3 id="2-__u6CA1_u6709_u91CF_u5316_u7684_u6807_u51C6_u65E0_u6CD5_u505A_u6709_u6548_u7684_u51B3_u5B9A"><a href="#2-__u6CA1_u6709_u91CF_u5316_u7684_u6807_u51C6_u65E0_u6CD5_u505A_u6709_u6548_u7684_u51B3_u5B9A" class="headerlink" title="2. 没有量化的标准无法做有效的决定"></a>2. 没有量化的标准无法做有效的决定</h3><p>在这一年的工作当中，在产品方面给我收获最大是参加公司里的一个新技术应用比赛，在这个比赛中我主导了一个产品从创意产生到原型上线的整个过程，我们有4个团队成员，当时的工作分别是2个产品1个技术1个测试，报名和队伍的组织者是我。按照比赛的进程说说每个阶段的收获：</p>
<h4 id="a-__u56E2_u961F_u5185_u90E8_u786E_u5B9A_u65B9_u5411"><a href="#a-__u56E2_u961F_u5185_u90E8_u786E_u5B9A_u65B9_u5411" class="headerlink" title="a. 团队内部确定方向"></a>a. 团队内部确定方向</h4><p>团队内部的决策过程是很典型的，我不主导我不说话，所以主导确定下来方向并不难</p>
<h4 id="b-__u539F_u578B_u5236_u4F5C"><a href="#b-__u539F_u578B_u5236_u4F5C" class="headerlink" title="b. 原型制作"></a>b. 原型制作</h4><p>这里的原型并不是指设计稿，而是一个可以真实使用的简单实现。在这个过程中作为设计需要和技术不断进行沟通，这个阶段学到的是：不要预设别人是怎么沟通的，没有应该就是怎样的事情，所有事情都应该说清楚；此外，在应该怎样设计的问题上我们经历了一次争论，问题的焦点是界面风格应该和旧的但是成功的产品保持一致，还是以创新的方式进行全新的更好看的设计，可惜任何有关偏好的问题都是没有结果的，一个问题在讨论之前需要先可以量化的标准</p>
<h4 id="c-__u5411_u9886_u5BFC_u6C47_u62A5_u4EA7_u54C1_u601D_u8DEF"><a href="#c-__u5411_u9886_u5BFC_u6C47_u62A5_u4EA7_u54C1_u601D_u8DEF" class="headerlink" title="c. 向领导汇报产品思路"></a>c. 向领导汇报产品思路</h4><p>或许根据不同的公司环境，这个环节会有差异，因为我也是那个做汇报的人，仅从我的经历出发这个阶段我学到：你觉得对的事即使真的是对的，别人也不会觉得是对的，更别说有可能是错的</p>
<h3 id="3-__u9700_u6C42_u4E0D_u4E00_u5B9A_u662F_u5408_u7406_u7684_uFF0C_u4F46_u4E0D_u987E_u53CA_u9700_u6C42_u4E00_u5B9A_u662F_u4E0D_u5408_u7406_u7684"><a href="#3-__u9700_u6C42_u4E0D_u4E00_u5B9A_u662F_u5408_u7406_u7684_uFF0C_u4F46_u4E0D_u987E_u53CA_u9700_u6C42_u4E00_u5B9A_u662F_u4E0D_u5408_u7406_u7684" class="headerlink" title="3. 需求不一定是合理的，但不顾及需求一定是不合理的"></a>3. 需求不一定是合理的，但不顾及需求一定是不合理的</h3><p>这一年里因为这个职位的缘故，我认识很多不同职位上的人，他们中有销售，策划，市场，社区管理，运营，技术，通过与这些人的交流在无意中帮助我得以看清整个需求传递的链条。看清楚这个过程，就会发现在这个链条中的人对于整个链条的影响是微乎其微的，链条的运作其实都取决于老板，老板在处理链条运作方面的能力决定了一切，其他人做好自己的事情就已经是最好的结局。</p>
<h3 id="4-__u9664_u975E_u8FEB_u4E0D_u5F97_u5DF2_uFF0C_u6CA1_u6709_u4EBA_u4F1A_u770B_u6587_u6863"><a href="#4-__u9664_u975E_u8FEB_u4E0D_u5F97_u5DF2_uFF0C_u6CA1_u6709_u4EBA_u4F1A_u770B_u6587_u6863" class="headerlink" title="4. 除非迫不得已，没有人会看文档"></a>4. 除非迫不得已，没有人会看文档</h3><p>这一年里为数不多能让我津津乐道的是我用 sina app engine 做服务器用 PHP + Bootstrap 为运营写了一个简化后台操作的工具，那段时间还做了一个实时翻译的小工具，方便自己在翻译时用。在我的简易版后台操作里，即使是我认为写的清清楚楚的操作指南，作为一个互联网公司的员工依然还是不断出问题，囿于公司本身后台不稳定并没有做进一步操作流程的改善。从产品设计的角度讲这就是真实的需要产品使用指南的产品除非迫不得已，不会有人用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2013年7月我毕业，开始从事一个叫做产品助理的工作，在一家互联网公司。2013年是产品这个概念最疯传的一年，那一年所有人都在谈论张小龙的产品理念，那一年所有人都要跟你谈用户体验。疯传的背后有产业真实的发展与前进，也有互联网时代典型的一哄而上。这一年我学到的：</p>
<h]]>
    </summary>
    
      <category term="产品经理" scheme="http://blog.fengweizhou.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="其他" scheme="http://blog.fengweizhou.com/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
