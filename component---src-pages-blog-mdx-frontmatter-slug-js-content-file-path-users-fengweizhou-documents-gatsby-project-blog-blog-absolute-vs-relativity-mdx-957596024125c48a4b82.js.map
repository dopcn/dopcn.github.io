{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-users-fengweizhou-documents-gatsby-project-blog-blog-absolute-vs-relativity-mdx-957596024125c48a4b82.js","mappings":"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","sources":["webpack://dopcn-blog/./blog/absolute-vs-relativity.mdx","webpack://dopcn-blog/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://dopcn-blog/./src/components/layout.module.css","webpack://dopcn-blog/./src/components/layout.js","webpack://dopcn-blog/./src/components/seo.js","webpack://dopcn-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    strong: \"strong\",\n    h3: \"h3\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"这个世界上所有事物都是相对的，只有「相对」本身是绝对的\\n\", React.createElement(_components.strong, null, \"接盘侠日记\")), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"最屌文件命名\"), \"\\n\", React.createElement(_components.p, null, \"曾经有一个合作的设计师出了一套新版本界面设计稿，她新建了一个文件夹打包上传到内部 GitLab repo ，我 pull 下来看到这个文件夹\"), \"\\n\", React.createElement(_components.img, {\n    src: \"1.png\",\n    alt: \"image\"\n  }), \"\\n\", React.createElement(_components.p, null, \"这是我目前看到过最屌的命名，于是我想下一个版本的设计稿文件夹她会起什么名字：「目前最最新的稿子」？「比目前最新的稿子更新的稿子」？「未来最新的稿子」？无论选择这其中的哪一种方案都会有一个共同特点，那就是下一次的起名都必须依赖于这一次的名字，以用来表明这个文件夹更新，而这种依赖是递增不可绕过的，比如说选用第一种方案那么到下下下下个版本就是「目前最最最最最最新的稿子」，以此类推这显然是一个灾难。当然实际中我们的设计师并不会这样，更常见的情况是下一次她的命名直接进入另一个次元，「稿子新」比「目前最新的稿子」更新，这样就可以区分出哪个更新，现在的使用者是清楚了可是接盘侠呢，果然光荣与伟大并不是那么得容易担当。\"), \"\\n\", React.createElement(_components.h3, null, \"绝对和相对\"), \"\\n\", React.createElement(_components.p, null, \"当需要设定某种唯一标识的时候，绝对的概念能够更明确的定位。当需要描述一种关系的时候，相对的表述方法更加适合。\"), \"\\n\", React.createElement(_components.p, null, \"相对和绝对路径是一个直观的例子。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"/Users/fengweizhou/Documents/dopcnblog/source/_posts/absolute-vs-relativity.md\\nsource/_posts/absolute-vs-relativity.md\\n\")), \"\\n\", React.createElement(_components.p, null, \"绝对路径则是由根目录开始一层一层明确写出到达目标文件的完整路径。相对路径可以直接用文件名引入同一个文件夹中同级的文件，用 \", React.createElement(_components.code, null, \"../\"), \" 代表上一级目录。显然两种不同用法在不同的环境中各有优势，在决定使用哪一种用法之前能够明确区分两种方法的不同很重要。\"), \"\\n\", React.createElement(_components.h3, null, \"其他绝对和相对的例子\"), \"\\n\", React.createElement(_components.h4, null, \"绝对和相对的界面构建\"), \"\\n\", React.createElement(_components.p, null, \"界面布局的相对和绝对。在这个领域「相对」有压倒性的优势，在浏览器端响应式网页应该是如今网站建设的标配，除了流量特别大的网站可能会为了特别定制将移动端网页分出去。使用 CSS 进行网页布局可以分为三个阶段：手写 CSS -> 用 Sass 写 CSS -> 用 Sass 写 Flexbox。在阶段一是使用「绝对」的方式写 CSS，这样依然可以写出「相对」的布局\"), \"\\n\", React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: \"300\",\n    src: \"//jsfiddle.net/wzo25cjt/3/embedded/html,css,result\",\n    allowfullscreen: \"allowfullscreen\",\n    frameborder: \"0\"\n  }), \"\\n\", React.createElement(_components.p, null, \"HTML 文档在布局时天生就是「相对」的，父元素子元素间相对，同级元素之间的相对。但是这种相对布局的规则是由开发者提前「绝对」写死的。进入阶段二，这个阶段 Sass 为 CSS 引入了编程特性，程序员可以像用编程语言一样写 CSS ，于是写 CSS 的方式变为「相对」。\"), \"\\n\", React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: \"300\",\n    src: \"//jsfiddle.net/wzo25cjt/10/embedded/html,css,result\",\n    allowfullscreen: \"allowfullscreen\",\n    frameborder: \"0\"\n  }), \"\\n\", React.createElement(_components.p, null, \"进入阶段三 Flexbox 模型将布局规则抽象为指令，开发者只要列出应该怎样布局剩下的大部分都交给了浏览器去计算，开发者写出的规则也变成「相对」的了。\"), \"\\n\", React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: \"300\",\n    src: \"//jsfiddle.net/wzo25cjt/11/embedded/html,css,result\",\n    allowfullscreen: \"allowfullscreen\",\n    frameborder: \"0\"\n  }), \"\\n\", React.createElement(_components.p, null, \"iOS 设备上的界面构建技术稍落后于前端不过遵循了同样的路径。从只有一种屏幕大小的时代手写固定的 CGRect，到在 Size Class 中建立 AutoLayout 约束规则，这样编写出的约束规则依然是绝对的，最后再到使用 UIStackView 布局减少了许多需要手动设置 AutoLayout 的步骤。对比最初的手写固定 CGRect 越来越相对。\"), \"\\n\", React.createElement(_components.h4, null, \"页面转换路径的相对绝对\"), \"\\n\", React.createElement(_components.p, null, \"我之前合作的产品经理同时负责产品的网页端和客户端，所以可能就是因为这个原因在客户端的设计过程中页面转换逻辑几乎是按照网页端的来，网页端的页面转换是链接跳转，类似于利用指针访问可以任意跳转，相比之下客户端的页面转换逻辑大多时候是后进先出的栈结构。再加上以前页面转换逻辑的写法相对绝对\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"let vc = SomeViewController()\\nnavigationController?.pushViewController(vc, animated: true)\\n\")), \"\\n\", React.createElement(_components.p, null, \"没少为设计方案来回讨论。后来为了为了尽可能适应这种网页端转换逻辑同时也扩大转换的自由度增加了URLTransformer 层，简单的原型：\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"private protocol URLTransFormer {\\n    func canTransform(url: NSURL) -> Bool\\n    func transform(url: NSURL) -> UIViewController\\n}\\n\\n//======================\\n//transformer list start\\n\\nprivate struct Page1Transformer: URLTransFormer {\\n    func canTransform(url: NSURL) -> Bool {\\n        if url.scheme == \\\"mydomain\\\" {\\n            return true\\n        }\\n        return false\\n    }\\n    func transform(url: NSURL) -> UIViewController {\\n        return SomeViewController(url: url)\\n    }\\n}\\n\\n//tranformer list end\\n//===================\\n\\nstruct URLTransformer {\\n    private let transformerList = [Page1Transformer()]\\n    func transform(url: NSURL) -> UIViewController? {\\n        for transformer in transformerList {\\n            if transformer.canTransform(url) {\\n                return transformer.transform(url)\\n            }\\n        }\\n        return nil\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"这样页面转换逻辑就变成相对的，客户端同一个按钮可以根据服务器返回的链接形式打开不同的页面。这里服务器返回的链接一定要是绝对的完整路径，因为这个链接是在做一个唯一性的标识。\"), \"\\n\", React.createElement(_components.h4, null, \"描述一种相对的关系\"), \"\\n\", React.createElement(_components.p, null, \"程序运行逻辑里有许多部分是要描述一种关系，例如注册页面在用户名密码通过格式验证之后提交按钮才可用\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"import ReactiveUIKit\\nimport ReactiveKit\\n\\n……\\n\\ncombineLatest(usernameField.rText, passwordField.rText).map { username, password in\\n            guard let name = username, let pass = password else {\\n                return false\\n            }\\n            return name.characters.count > 7 && pass.characters.count > 7\\n        }.bindTo(submitButton.rEnabled)\\n\\n……\\n\\n\")), \"\\n\", React.createElement(_components.p, null, \"简单地使用用户名和密码都必须大于7位做验证条件，这个验证的 true false 和按钮 enable 状态的true false 之间是一种对应关系，如果用常用的赋值方法来每次改动这个值，可以想象条件分支会非常多，相对而言会不容易维护。这里直接描述对应关系使用的是第三方库 ReactiveKit，除了这个还有其他一些可以实现类似功能的库，不过达到的效果是类似的。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/fengweizhou/Documents/gatsby_project/blog/blog/absolute-vs-relativity.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nconst BlogPost = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, data.mdx.frontmatter.date), children);\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var heading = \"layout-module--heading--f158c\";\nexport var navLinkItem = \"layout-module--nav-link-item--a5f0a\";\nexport var navLinkText = \"layout-module--nav-link-text--69cda\";\nexport var navLinks = \"layout-module--nav-links--1113b\";\nexport var siteTitle = \"layout-module--site-title--e4dea\";","import * as React from \"react\"\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport {\n    container,\n    heading,\n    navLinks,\n    navLinkItem,\n    navLinkText,\n    siteTitle,\n  } from './layout.module.css'\n\nconst Layout = (props) => {\n    const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      siteBuildMetadata {\n        buildTime\n      }\n    }\n  `)\n\n    const pageTitle = props.pageTitle;\n    const children = props.children;\n    return (\n        <div className={container}>\n            <header className={siteTitle}>{data.site.siteMetadata.title}</header>\n            <nav>\n                <ul className={navLinks}>\n                    <li className={navLinkItem}>\n                        <Link to='/' className={navLinkText}>Home</Link>\n                    </li>\n                    <li className={navLinkItem}>\n                        <Link to='/about' className={navLinkText}>About</Link>\n                    </li>\n                    <li className={navLinkItem}>\n                        <Link to=\"/blog\" className={navLinkText}>Archive</Link>\n                    </li>\n                </ul>\n            </nav>\n            <main>\n                <h1 className={heading}>{pageTitle}</h1>\n                {children}\n            </main>\n            <footer>{data.siteBuildMetadata.buildTime}</footer>\n        </div>\n    );\n}\n\nexport default Layout;","import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Seo = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <title>{title} | {data.site.siteMetadata.title}</title>\n  )\n}\n\nexport default Seo","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","blockquote","p","strong","h3","img","pre","code","h4","_provideComponents","components","React","src","alt","width","height","allowfullscreen","frameborder","wrapper","MDXLayout","BlogPost","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","date","Head","_ref2","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","navLinkItem","navLinkText","useStaticQuery","className","site","siteMetadata","to","siteBuildMetadata","buildTime","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}