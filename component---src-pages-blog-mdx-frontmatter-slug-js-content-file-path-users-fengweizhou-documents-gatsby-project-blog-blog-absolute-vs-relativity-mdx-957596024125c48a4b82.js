"use strict";(self.webpackChunkdopcn_blog=self.webpackChunkdopcn_blog||[]).push([[511],{7688:function(e,t,n){n.r(t),n.d(t,{Head:function(){return s},default:function(){return i}});var l=n(1151),r=n(7294);function a(e){const t=Object.assign({blockquote:"blockquote",p:"p",strong:"strong",h3:"h3",img:"img",pre:"pre",code:"code",h4:"h4"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.blockquote,null,"\n",r.createElement(t.p,null,"这个世界上所有事物都是相对的，只有「相对」本身是绝对的\n",r.createElement(t.strong,null,"接盘侠日记")),"\n"),"\n",r.createElement(t.h3,null,"最屌文件命名"),"\n",r.createElement(t.p,null,"曾经有一个合作的设计师出了一套新版本界面设计稿，她新建了一个文件夹打包上传到内部 GitLab repo ，我 pull 下来看到这个文件夹"),"\n",r.createElement(t.img,{src:"1.png",alt:"image"}),"\n",r.createElement(t.p,null,"这是我目前看到过最屌的命名，于是我想下一个版本的设计稿文件夹她会起什么名字：「目前最最新的稿子」？「比目前最新的稿子更新的稿子」？「未来最新的稿子」？无论选择这其中的哪一种方案都会有一个共同特点，那就是下一次的起名都必须依赖于这一次的名字，以用来表明这个文件夹更新，而这种依赖是递增不可绕过的，比如说选用第一种方案那么到下下下下个版本就是「目前最最最最最最新的稿子」，以此类推这显然是一个灾难。当然实际中我们的设计师并不会这样，更常见的情况是下一次她的命名直接进入另一个次元，「稿子新」比「目前最新的稿子」更新，这样就可以区分出哪个更新，现在的使用者是清楚了可是接盘侠呢，果然光荣与伟大并不是那么得容易担当。"),"\n",r.createElement(t.h3,null,"绝对和相对"),"\n",r.createElement(t.p,null,"当需要设定某种唯一标识的时候，绝对的概念能够更明确的定位。当需要描述一种关系的时候，相对的表述方法更加适合。"),"\n",r.createElement(t.p,null,"相对和绝对路径是一个直观的例子。"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"/Users/fengweizhou/Documents/dopcnblog/source/_posts/absolute-vs-relativity.md\nsource/_posts/absolute-vs-relativity.md\n")),"\n",r.createElement(t.p,null,"绝对路径则是由根目录开始一层一层明确写出到达目标文件的完整路径。相对路径可以直接用文件名引入同一个文件夹中同级的文件，用 ",r.createElement(t.code,null,"../")," 代表上一级目录。显然两种不同用法在不同的环境中各有优势，在决定使用哪一种用法之前能够明确区分两种方法的不同很重要。"),"\n",r.createElement(t.h3,null,"其他绝对和相对的例子"),"\n",r.createElement(t.h4,null,"绝对和相对的界面构建"),"\n",r.createElement(t.p,null,"界面布局的相对和绝对。在这个领域「相对」有压倒性的优势，在浏览器端响应式网页应该是如今网站建设的标配，除了流量特别大的网站可能会为了特别定制将移动端网页分出去。使用 CSS 进行网页布局可以分为三个阶段：手写 CSS -> 用 Sass 写 CSS -> 用 Sass 写 Flexbox。在阶段一是使用「绝对」的方式写 CSS，这样依然可以写出「相对」的布局"),"\n",r.createElement("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/wzo25cjt/3/embedded/html,css,result",allowfullscreen:"allowfullscreen",frameborder:"0"}),"\n",r.createElement(t.p,null,"HTML 文档在布局时天生就是「相对」的，父元素子元素间相对，同级元素之间的相对。但是这种相对布局的规则是由开发者提前「绝对」写死的。进入阶段二，这个阶段 Sass 为 CSS 引入了编程特性，程序员可以像用编程语言一样写 CSS ，于是写 CSS 的方式变为「相对」。"),"\n",r.createElement("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/wzo25cjt/10/embedded/html,css,result",allowfullscreen:"allowfullscreen",frameborder:"0"}),"\n",r.createElement(t.p,null,"进入阶段三 Flexbox 模型将布局规则抽象为指令，开发者只要列出应该怎样布局剩下的大部分都交给了浏览器去计算，开发者写出的规则也变成「相对」的了。"),"\n",r.createElement("iframe",{width:"100%",height:"300",src:"//jsfiddle.net/wzo25cjt/11/embedded/html,css,result",allowfullscreen:"allowfullscreen",frameborder:"0"}),"\n",r.createElement(t.p,null,"iOS 设备上的界面构建技术稍落后于前端不过遵循了同样的路径。从只有一种屏幕大小的时代手写固定的 CGRect，到在 Size Class 中建立 AutoLayout 约束规则，这样编写出的约束规则依然是绝对的，最后再到使用 UIStackView 布局减少了许多需要手动设置 AutoLayout 的步骤。对比最初的手写固定 CGRect 越来越相对。"),"\n",r.createElement(t.h4,null,"页面转换路径的相对绝对"),"\n",r.createElement(t.p,null,"我之前合作的产品经理同时负责产品的网页端和客户端，所以可能就是因为这个原因在客户端的设计过程中页面转换逻辑几乎是按照网页端的来，网页端的页面转换是链接跳转，类似于利用指针访问可以任意跳转，相比之下客户端的页面转换逻辑大多时候是后进先出的栈结构。再加上以前页面转换逻辑的写法相对绝对"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"let vc = SomeViewController()\nnavigationController?.pushViewController(vc, animated: true)\n")),"\n",r.createElement(t.p,null,"没少为设计方案来回讨论。后来为了为了尽可能适应这种网页端转换逻辑同时也扩大转换的自由度增加了URLTransformer 层，简单的原型："),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,'private protocol URLTransFormer {\n    func canTransform(url: NSURL) -> Bool\n    func transform(url: NSURL) -> UIViewController\n}\n\n//======================\n//transformer list start\n\nprivate struct Page1Transformer: URLTransFormer {\n    func canTransform(url: NSURL) -> Bool {\n        if url.scheme == "mydomain" {\n            return true\n        }\n        return false\n    }\n    func transform(url: NSURL) -> UIViewController {\n        return SomeViewController(url: url)\n    }\n}\n\n//tranformer list end\n//===================\n\nstruct URLTransformer {\n    private let transformerList = [Page1Transformer()]\n    func transform(url: NSURL) -> UIViewController? {\n        for transformer in transformerList {\n            if transformer.canTransform(url) {\n                return transformer.transform(url)\n            }\n        }\n        return nil\n    }\n}\n')),"\n",r.createElement(t.p,null,"这样页面转换逻辑就变成相对的，客户端同一个按钮可以根据服务器返回的链接形式打开不同的页面。这里服务器返回的链接一定要是绝对的完整路径，因为这个链接是在做一个唯一性的标识。"),"\n",r.createElement(t.h4,null,"描述一种相对的关系"),"\n",r.createElement(t.p,null,"程序运行逻辑里有许多部分是要描述一种关系，例如注册页面在用户名密码通过格式验证之后提交按钮才可用"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"import ReactiveUIKit\nimport ReactiveKit\n\n……\n\ncombineLatest(usernameField.rText, passwordField.rText).map { username, password in\n            guard let name = username, let pass = password else {\n                return false\n            }\n            return name.characters.count > 7 && pass.characters.count > 7\n        }.bindTo(submitButton.rEnabled)\n\n……\n\n")),"\n",r.createElement(t.p,null,"简单地使用用户名和密码都必须大于7位做验证条件，这个验证的 true false 和按钮 enable 状态的true false 之间是一种对应关系，如果用常用的赋值方法来每次改动这个值，可以想象条件分支会非常多，相对而言会不容易维护。这里直接描述对应关系使用的是第三方库 ReactiveKit，除了这个还有其他一些可以实现类似功能的库，不过达到的效果是类似的。"))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?r.createElement(t,e,r.createElement(a,e)):a(e)},o=n(72),u=n(9357);const m=e=>{let{data:t,children:n}=e;return r.createElement(o.Z,{pageTitle:t.mdx.frontmatter.title},r.createElement("p",null,t.mdx.frontmatter.date),n)},s=e=>{let{data:t}=e;return r.createElement(u.Z,{title:t.mdx.frontmatter.title})};function i(e){return r.createElement(m,e,r.createElement(c,e))}},72:function(e,t,n){n.d(t,{Z:function(){return o}});var l=n(7294),r=n(1883),a="layout-module--nav-link-item--a5f0a",c="layout-module--nav-link-text--69cda";var o=e=>{const t=(0,r.K2)("3555523106"),n=e.pageTitle,o=e.children;return l.createElement("div",{className:"layout-module--container--78b04"},l.createElement("header",{className:"layout-module--site-title--e4dea"},t.site.siteMetadata.title),l.createElement("nav",null,l.createElement("ul",{className:"layout-module--nav-links--1113b"},l.createElement("li",{className:a},l.createElement(r.rU,{to:"/",className:c},"Home")),l.createElement("li",{className:a},l.createElement(r.rU,{to:"/about",className:c},"About")),l.createElement("li",{className:a},l.createElement(r.rU,{to:"/blog",className:c},"Archive")))),l.createElement("main",null,l.createElement("h1",{className:"layout-module--heading--f158c"},n),o),l.createElement("footer",null,t.siteBuildMetadata.buildTime))}},9357:function(e,t,n){var l=n(7294),r=n(1883);t.Z=e=>{let{title:t}=e;const n=(0,r.K2)("3159585216");return l.createElement("title",null,t," | ",n.site.siteMetadata.title)}},1151:function(e,t,n){n.d(t,{ah:function(){return a}});var l=n(7294);const r=l.createContext({});function a(e){const t=l.useContext(r);return l.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-users-fengweizhou-documents-gatsby-project-blog-blog-absolute-vs-relativity-mdx-957596024125c48a4b82.js.map